name: Build Test Version

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: '选择构建类型'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - debug
      include_debug:
        description: '包含调试信息'
        required: false
        type: boolean
        default: false

jobs:
  build-test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Tesseract OCR
      run: |
        choco install tesseract --version=5.3.3
        echo "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        
        # 核心GUI和OCR依赖
        pip install PyQt5==5.15.10
        pip install pytesseract==0.3.10
        pip install Pillow==10.0.1
        
        # 安装CPU版本的PyTorch（避免CUDA依赖）
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        
        # 翻译核心依赖
        pip install argostranslate==1.9.6
        pip install stanza
        pip install ctranslate2
        pip install sentencepiece
        
        # 图像和屏幕处理
        pip install opencv-python-headless
        pip install mss
        pip install pynput
        pip install screeninfo
        
        # 网络和其他工具
        pip install requests==2.31.0
        pip install certifi
        pip install ttkthemes
        pip install numpy>=1.21.0
        
        # 打包工具
        pip install pyinstaller==6.2.0
        
        # 如果存在requirements.txt，也安装它
        if (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        }
      shell: powershell
      
    - name: Download Tesseract language packs
      run: |
        $tessdata = "C:\Program Files\Tesseract-OCR\tessdata"
        
        # 核心语言包
        $essential_langs = @("eng")
        
        foreach ($lang in $essential_langs) {
          $url = "https://github.com/tesseract-ocr/tessdata_fast/raw/main/$lang.traineddata"
          $output = "$tessdata\$lang.traineddata"
          if (!(Test-Path $output)) {
            Write-Host "Downloading $lang language pack..."
            Invoke-WebRequest -Uri $url -OutFile $output -ErrorAction Stop
          }
        }
      shell: powershell
      
    - name: Create Windows launcher and spec file
      shell: powershell  # 将 bash 改为 powershell
      run: |
        # 创建启动器
        cat > skylark_launcher.py << 'EOF'
#!/usr/bin/env python3
"""
Skylark Screen Translator - Windows 启动器
"""

import os
import sys
import traceback
import logging

def setup_logging():
    log_format = '[%(levelname)s] %(message)s'
    logging.basicConfig(level=logging.INFO, format=log_format)
    return logging.getLogger(__name__)

logger = setup_logging()

def setup_windows_environment():
    """设置 Windows 环境变量和路径"""
    app_dir = os.path.dirname(os.path.abspath(__file__))
    internal_dir = os.path.join(app_dir, "_internal")
    
    # SSL 证书
    cert_paths = [
        os.path.join(internal_dir, "certifi", "cacert.pem"),
        os.path.join(app_dir, "certifi", "cacert.pem"),
    ]
    for cert_path in cert_paths:
        if os.path.isfile(cert_path):
            os.environ["SSL_CERT_FILE"] = cert_path
            os.environ["REQUESTS_CA_BUNDLE"] = cert_path
            break
    
    # Tesseract 路径
    tesseract_paths = [
        os.path.join(internal_dir, "tesseract", "tesseract.exe"),
        os.path.join(app_dir, "tesseract", "tesseract.exe"),
    ]
    for tesseract_path in tesseract_paths:
        if os.path.isfile(tesseract_path):
            os.environ["TESSERACT_CMD"] = tesseract_path
            break
    
    # Tessdata 目录
    tessdata_paths = [
        os.path.join(internal_dir, "tessdata"),
        os.path.join(app_dir, "tessdata"),
    ]
    for tessdata_path in tessdata_paths:
        if os.path.isdir(tessdata_path):
            os.environ["TESSDATA_PREFIX"] = tessdata_path
            break

def configure_argos_packages():
    """配置 argostranslate 语言包目录"""
    user_data_dir = os.path.join(os.path.expanduser("~"), "AppData", "Local", "argos-translate", "packages")
    
    if os.environ.get("ARGOS_PACKAGES_DIR"):
        return
    
    try:
        os.makedirs(user_data_dir, exist_ok=True)
        os.environ["ARGOS_PACKAGES_DIR"] = user_data_dir
    except Exception:
        pass

def main():
    try:
        setup_windows_environment()
        configure_argos_packages()
        
        app_dir = os.path.dirname(os.path.abspath(__file__))
        main_script = os.path.join(app_dir, "skylark_screen_translator.py")
        
        if not os.path.isfile(main_script):
            print(f"找不到主程序: {main_script}")
            sys.exit(1)
        
        with open(main_script, "rb") as f:
            code = compile(f.read(), main_script, "exec")
            exec(code, {"__file__": main_script, "__name__": "__main__"})
            
    except Exception as e:
        traceback.print_exc()
        input("程序异常，按回车键退出...")
        sys.exit(1)

if __name__ == "__main__":
    main()
EOF
        
        # 创建PyInstaller spec文件
        cat > skylark_build.spec << 'EOF'
# -*- mode: python ; coding: utf-8 -*-
import os
from pathlib import Path

block_cipher = None

# 检查必要文件
required_files = ['skylark_screen_translator.py', 'online_translator.py']
for file in required_files:
    if not os.path.exists(file):
        raise FileNotFoundError(f'找不到必要文件: {file}')

print('找到所有必要文件，开始构建...')

a = Analysis(
    ['skylark_launcher.py'],
    pathex=[os.path.abspath('.')],
    binaries=[
        ('C:\\Program Files\\Tesseract-OCR\\tesseract.exe', 'tesseract'),
        ('C:\\Program Files\\Tesseract-OCR\\tessdata\\*.traineddata', 'tessdata'),
    ],
    datas=[
        ('skylark_screen_translator.py', '.'),
        ('online_translator.py', '.'),
        ('skylark.png', '.'),
    ],
    hiddenimports=[
        'PyQt5.QtCore',
        'PyQt5.QtGui', 
        'PyQt5.QtWidgets',
        'PyQt5.sip',
        'sip',
        'PIL',
        'PIL.Image',
        'PIL.ImageGrab',
        'PIL.ImageTk',
        'PIL._tkinter_finder',
        'pytesseract',
        'mss',
        'mss.windows',
        'pynput',
        'pynput.keyboard',
        'pynput.mouse',
        'pynput.keyboard._win32',
        'pynput.mouse._win32',
        'screeninfo',
        'requests',
        'requests.packages.urllib3',
        'requests.adapters',
        'urllib3.contrib.pyopenssl',
        'certifi',
        'argostranslate',
        'argostranslate.package',
        'argostranslate.translate',
        'argostranslate.settings',
        'argostranslate.utils',
        'stanza',
        'ctranslate2',
        'sentencepiece',
        'torch',
        'torchvision',
        'torchaudio',
        'numpy',
        'numpy.core._methods',
        'numpy.lib.format',
        'cv2',
        'ttkthemes',
        'online_translator',
        'json',
        'hashlib',
        'uuid',
        'pkg_resources.py2_warn',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[
        'matplotlib',
        'scipy', 
        'pandas',
        'jupyter',
        'PyQt5.QtWebEngine',
        'PyQt5.QtWebEngineWidgets',
        'tensorflow',
        'keras',
        'tkinter',
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='SkylarkTranslator',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=False,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='skylark.png' if os.path.exists('skylark.png') else None,
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=False,
    upx_exclude=[],
    name='SkylarkTranslator',
)
EOF
      shell: bash
      
    - name: Build with PyInstaller
      run: |
        Write-Host "开始构建 Skylark Screen Translator..."
        pyinstaller skylark_build.spec --clean --noconfirm
        
        if (!(Test-Path "dist\SkylarkTranslator\SkylarkTranslator.exe")) {
          throw "构建失败：找不到可执行文件"
        }
        
        Write-Host "构建成功！"
        Get-ChildItem "dist\SkylarkTranslator" -Recurse | Measure-Object -Property Length -Sum | ForEach-Object { "总大小: $([math]::Round($_.Sum/1MB, 2)) MB" }
      shell: powershell
      
    - name: Create portable package
      run: |
        $buildType = "${{ inputs.build_type }}"
        $timestamp = Get-Date -Format "yyyyMMdd_HHmm"
        $packageName = "SkylarkTranslator_Windows_${buildType}_${timestamp}"
        
        # 创建打包目录
        New-Item -Path "package\$packageName" -ItemType Directory -Force | Out-Null
        
        # 复制程序文件
        Copy-Item "dist\SkylarkTranslator\*" "package\$packageName\" -Recurse
        
        # 创建启动脚本
        @"
@echo off
echo 启动 Skylark Screen Translator...
cd /d "%~dp0"
SkylarkTranslator.exe
if errorlevel 1 (
    echo 程序异常退出，错误代码: %errorlevel%
    pause
)
"@ | Out-File -FilePath "package\$packageName\启动程序.bat" -Encoding Default
        
        # 创建说明文件
        @"
Skylark Screen Translator - Windows 测试版
构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
构建类型: $buildType

== 快速开始 ==
1. 双击 "启动程序.bat" 或直接运行 SkylarkTranslator.exe
2. 首次使用请先进入"语言包管理"安装翻译包
3. 安装完成后重启程序，在设置中选择翻译语言

== 使用说明 ==
• 左键拖拽：选择屏幕区域
• 右键双击：执行OCR和翻译
• 左键单击：显示/隐藏翻译窗口
• 鼠标滚轮：滚动翻译内容

== 注意事项 ==
• 这是未签名的测试版本
• Windows Defender可能会显示安全警告（正常现象）
• 需要CPU支持SSE4.1指令集
• 建议运行内存2GB以上

== 问题反馈 ==
如遇到问题请到GitHub仓库反馈：
https://github.com/jtliaw/Skylark-Screen-Translator

"@ | Out-File -FilePath "package\$packageName\使用说明.txt" -Encoding UTF8
        
        # 创建ZIP包
        Compress-Archive -Path "package\$packageName" -DestinationPath "$packageName.zip" -Force
        
        Write-Host "打包完成: $packageName.zip"
        echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: powershell
      
    - name: Upload test build
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.zip
        retention-days: 7
        
    - name: Create build summary
      run: |
        $size = (Get-Item "${{ env.PACKAGE_NAME }}.zip").Length
        $sizeMB = [math]::Round($size/1MB, 2)
        
        Write-Host "## 构建完成 ✅" 
        Write-Host "- 构建类型: ${{ inputs.build_type }}"
        Write-Host "- 包含调试信息: ${{ inputs.include_debug }}"
        Write-Host "- 文件大小: ${sizeMB} MB"
        Write-Host "- 文件名: ${{ env.PACKAGE_NAME }}.zip"
        Write-Host ""
        Write-Host "📥 下载构建的文件："
        Write-Host "1. 点击上方的 Actions 标签"
        Write-Host "2. 选择这次运行"
        Write-Host "3. 在 Artifacts 部分下载 ZIP 文件"
        Write-Host ""
        Write-Host "🧪 测试说明："
        Write-Host "1. 解压ZIP文件"
        Write-Host "2. 运行 启动程序.bat 或直接运行 SkylarkTranslator.exe"
        Write-Host "3. 首次运行需要安装语言包"
      shell: powershell
