name: Build Windows Release (No Argos Translate)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - stable

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check if Tesseract is already installed
        shell: powershell
        run: |
          if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
              Write-Host 'Tesseract is already installed'
              echo 'C:\Program Files\Tesseract-OCR' | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              exit 0
          } else {
              Write-Host 'Tesseract not found, will install it'
          }

      - name: Install Tesseract OCR (if needed)
        shell: powershell
        run: |
          if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
              Write-Host 'Tesseract already installed, skipping installation'
              exit 0
          }
          
          Write-Host 'Installing Tesseract OCR using Windows installer...'
          
          # Download Tesseract installer from official source
          $tesseractUrl = "https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-5.3.3.20231005.exe"
          $installerPath = "$env:TEMP\tesseract-setup.exe"
          
          try {
              # Download the installer
              Write-Host "Downloading Tesseract installer from $tesseractUrl"
              Invoke-WebRequest -Uri $tesseractUrl -OutFile $installerPath
              
              # Install Tesseract silently
              Write-Host "Installing Tesseract OCR..."
              Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait
              
              # Verify installation
              if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
                  echo 'C:\Program Files\Tesseract-OCR' | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                  Write-Host 'Tesseract installed successfully'
              } else {
                  Write-Host 'Tesseract installation may have failed, but continuing build process'
              }
          } catch {
              Write-Host "Failed to download or install Tesseract: $($_.Exception.Message)"
              Write-Host 'Continuing build process without Tesseract installation'
          } finally {
              # Clean up installer
              if (Test-Path $installerPath) {
                  Remove-Item $installerPath -Force
              }
          }

      - name: Install Python dependencies
        shell: powershell
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install setuptools==68.0.0
          pip install PyQt5==5.15.9
          pip install pytesseract==0.3.10
          pip install numpy==1.24.3
          pip install opencv-python==4.8.1.78
          pip install pillow==10.0.1
          pip install certifi==2023.7.22
          pip install requests==2.31.0
          pip install pyinstaller==6.2.0
          pip install mss==9.0.1
          pip install pynput==1.7.6
          pip install screeninfo==0.8.1
          pip install ttkthemes==3.2.2

      - name: Create language pack directories
        shell: powershell
        run: |
          New-Item -ItemType Directory -Path "tessdata" -Force
          Write-Host "Created OCR language pack directory: tessdata"

      - name: Download OCR language packs
        shell: powershell
        run: |
          $langs = @("eng", "chi_sim", "chi_tra")
          
          foreach ($lang in $langs) {
              $outputPath = "tessdata/${lang}.traineddata"
              
              # Try multiple sources for downloading language packs
              $sources = @(
                  "https://github.com/tesseract-ocr/tessdata/raw/main/${lang}.traineddata",
                  "https://raw.githubusercontent.com/tesseract-ocr/tessdata/main/${lang}.traineddata"
              )
              
              $downloaded = $false
              foreach ($url in $sources) {
                  try {
                      Write-Host "Attempting to download $lang from $url"
                      Invoke-WebRequest -Uri $url -OutFile $outputPath -TimeoutSec 30
                      Write-Host "Successfully downloaded $lang language pack"
                      $downloaded = $true
                      break
                  } catch {
                      Write-Host "Failed to download from $url: $($_.Exception.Message)"
                  }
              }
              
              if (-not $downloaded) {
                  Write-Host "Warning: Could not download $lang language pack from any source"
              }
          }

      - name: Build with PyInstaller
        shell: powershell
        run: |
          Write-Host 'Building Skylark Screen Translator...'
          
          if (Test-Path 'skylark_screen_translator.py') {
            Write-Host 'Found main program: skylark_screen_translator.py'
            $mainScript = 'skylark_screen_translator.py'
          } else {
            Write-Host 'Available Python files:'
            Get-ChildItem *.py | Format-Table Name
            throw 'Main program not found. Please check your repository structure.'
          }
          
          # Simplified PyInstaller configuration
          $pyinstallerArgs = @(
              "--name", "SkylarkTranslator",
              "--onedir",
              "--windowed",
              "--add-data", "tessdata;tessdata",
              "--hidden-import", "pytesseract",
              "--hidden-import", "numpy",
              "--hidden-import", "cv2",
              "--hidden-import", "PIL",
              "--hidden-import", "certifi",
              "--hidden-import", "requests",
              "--hidden-import", "PyQt5",
              "--hidden-import", "PyQt5.QtCore",
              "--hidden-import", "PyQt5.QtGui",
              "--hidden-import", "PyQt5.QtWidgets",
              "--exclude-module", "stanza",
              "--exclude-module", "setuptools._distutils",
              $mainScript
          )
          
          # Execute PyInstaller command
          pyinstaller @pyinstallerArgs
          
          $exePath = 'dist\SkylarkTranslator\SkylarkTranslator.exe'
          if (Test-Path $exePath) {
              $folderSize = (Get-ChildItem 'dist\SkylarkTranslator' -Recurse | Measure-Object -Property Length -Sum).Sum
              $sizeMB = [math]::Round($folderSize/1MB, 2)
              Write-Host "Build successful! Directory size: $sizeMB MB"
              echo "BUILD_SIZE_MB=$sizeMB" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
              throw 'Build failed: Executable file not found'
          }

      # ... (其余步骤保持不变)
