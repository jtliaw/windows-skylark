name: Build Windows Skylark Translator

on:
  push:
    tags:
      - 'v*' # 当推送以v开头的标签时触发构建
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 允许手动触发工作流

env:
  PYTHON_VERSION: '3.9' # 使用Python 3.9以确保兼容性

jobs:
  build-windows:
    runs-on: windows-latest # 使用Windows构建环境

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: 'x64'

    - name: Install system dependencies
      run: |
        # 安装Windows构建工具（如果需要编译某些Python包）
        choco install -y vcredist2019
        # 安装Tesseract OCR（如果需要OCR功能）
        choco install -y tesseract

    - name: Add Tesseract to PATH
      run: |
        echo "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install PyQt5==5.15.10
        pip install Pillow>=9.0.0
        pip install numpy>=1.21.0
        pip install opencv-python-headless
        pip install pytesseract
        pip install mss
        pip install pynput
        pip install requests
        pip install screeninfo
        pip install ttkthemes
        pip install certifi

    - name: Install argostranslate (offline translation)
      run: |
        # 设置环境变量以避免CUDA依赖
        $env:FORCE_CUDA = "0"
        $env:USE_CUDA = "0"
        
        # 安装argostranslate及其依赖
        pip install PyYAML requests packaging six
        pip install sentencepiece
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install stanza
        pip install ctranslate2
        pip install argostranslate

    - name: Verify required files exist
      run: |
        # 检查必要的文件是否存在
        if (-Not (Test-Path "skylark_screen_translator.py")) {
          Write-Error "Missing required file: skylark_screen_translator.py"
          exit 1
        }
        if (-Not (Test-Path "online_translator.py")) {
          Write-Error "Missing required file: online_translator.py"
          exit 1
        }
        
        # 如果没有图标，创建一个默认的
        if (-Not (Test-Path "skylark.ico")) {
          if (Test-Path "skylark.png") {
            # 如果有PNG图标，转换为ICO格式
            python -c "
from PIL import Image
img = Image.open('skylark.png')
img.save('skylark.ico', format='ICO', sizes=[(16,16), (32,32), (48,48), (64,64), (128,128), (256,256)])
print('Converted PNG to ICO')
"
          else {
            # 创建默认图标
            python -c "
from PIL import Image, ImageDraw
img = Image.new('RGB', (256, 256), (30, 144, 255))
draw = ImageDraw.Draw(img)
draw.ellipse((50, 50, 206, 206), fill=(255, 255, 255))
draw.ellipse((80, 80, 176, 176), fill=(30, 144, 255))
img.save('skylark.ico', format='ICO')
print('Created default ICO icon')
"
          }
        }

    - name: Create PyInstaller spec file for Windows
      run: |
        # 创建Windows专用的spec文件
        $specContent = @"
# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

# Windows专用的隐藏导入
hiddenimports = [
    'PyQt5.QtCore',
    'PyQt5.QtGui', 
    'PyQt5.QtWidgets',
    'PyQt5.sip',
    'sip',
    
    'PIL',
    'PIL.Image',
    'PIL.ImageGrab',
    'PIL.ImageTk',
    'cv2',
    'numpy',
    'numpy.core._methods',
    'numpy.lib.format',
    
    'pytesseract',
    'mss',
    'mss.windows',
    'pynput',
    'pynput.keyboard',
    'pynput.mouse',
    'pynput.keyboard._win32',
    'pynput.mouse._win32',
    'screeninfo',
    
    'requests',
    'requests.packages.urllib3',
    'certifi',
    'ttkthemes',
    
    'argostranslate',
    'argostranslate.package',
    'argostranslate.translate',
    'argostranslate.settings',
    'argostranslate.utils',
    
    'stanza',
    'ctranslate2',
    'sentencepiece',
    'torch',
    
    'online_translator',
    
    'json',
    'hashlib',
    'uuid',
    'pkg_resources.py2_warn',
]

# 数据文件
datas = []

# 添加主脚本文件
import os
datas.append(('skylark_screen_translator.py', '.'))
datas.append(('online_translator.py', '.'))

# 添加图标文件（如果存在）
if os.path.exists('skylark.ico'):
    datas.append(('skylark.ico', '.'))

# 添加SSL证书
try:
    import certifi
    datas.append((certifi.where(), 'certifi'))
except:
    pass

# 添加argostranslate数据
try:
    import argostranslate
    argos_path = os.path.dirname(argostranslate.__file__)
    datas.append((argos_path, 'argostranslate'))
except:
    pass

a = Analysis(
    ['skylark_screen_translator.py'],
    pathex=[],
    binaries=[],
    datas=datas,
    hiddenimports=hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[
        'matplotlib',
        'scipy', 
        'pandas',
        'jupyter',
        'PyQt5.QtWebEngine',
        'PyQt5.QtWebEngineWidgets',
        'tensorflow',
        'keras',
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='Skylark_Translator',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,  # Windows上使用UPX压缩可执行文件
    console=False,  # 不显示控制台窗口
    icon='skylark.ico',  # 设置应用程序图标
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='Skylark_Translator',
)
"@
        Set-Content -Path "skylark_windows.spec" -Value $specContent

    - name: Build with PyInstaller
      run: |
        pyinstaller skylark_windows.spec --clean --noconfirm

    - name: Create ZIP package
      run: |
        # 创建发布版本的ZIP包
        $version = if ($env:GITHUB_REF -like "refs/tags/*") { 
            $env:GITHUB_REF.replace("refs/tags/", "") 
        } else { 
            "dev-$($env:GITHUB_RUN_ID)" 
        }
        
        $zipName = "Skylark_Translator_Windows_$version.zip"
        Compress-Archive -Path "dist/Skylark_Translator/*" -DestinationPath $zipName

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: Skylark-Translator-Windows
        path: Skylark_Translator_Windows_*.zip

    - name: Create release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: Skylark_Translator_Windows_*.zip
        draft: false
        prerelease: false
