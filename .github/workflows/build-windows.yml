name: Build Windows Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: '发布类型'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - stable
      include_debug:
        description: '包含调试信息'
        required: false
        type: boolean
        default: false

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        # 安装 Tesseract OCR
        choco install tesseract --version=5.3.3 -y
        echo "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        
        # 安装项目依赖
        pip install -r requirements.txt
        
        # 确保安装了所有必要的包
        pip install pyinstaller==6.2.0
        pip install pywin32
      shell: powershell
      
    - name: Download Tesseract language data
      run: |
        $tessdata = "C:\Program Files\Tesseract-OCR\tessdata"
        New-Item -Path $tessdata -ItemType Directory -Force | Out-Null
        
        # 下载必要的语言包
        $languages = @("eng", "chi_sim", "jpn")
        
        foreach ($lang in $languages) {
          $url = "https://github.com/tesseract-ocr/tessdata_fast/raw/main/$lang.traineddata"
          $output = "$tessdata\$lang.traineddata"
          Write-Host "Downloading $lang language data..."
          try {
            Invoke-WebRequest -Uri $url -OutFile $output -ErrorAction Stop
          } catch {
            Write-Host "Failed to download $lang, trying alternative URL..."
            $url = "https://github.com/tesseract-ocr/tessdata/raw/main/$lang.traineddata"
            Invoke-WebRequest -Uri $url -OutFile $output -ErrorAction SilentlyContinue
          }
        }
      shell: powershell
      
    - name: Create launcher script
      shell: powershell
      run: |
        $launcherContent = @"
import os
import sys
import subprocess

if __name__ == '__main__':
    # 设置环境变量
    # 注意：在 here-string 中，我们不需要像普通字符串那样对反斜杠进行双重转义
    os.environ['TESSERACT_CMD'] = 'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'
    os.environ['TESSDATA_PREFIX'] = 'C:\\Program Files\\Tesseract-OCR\\tessdata'
    
    # 运行主程序
    try:
        # 假设你的主程序是 main.py
        # 如果是其他文件名，请在这里修改
        subprocess.run(['python', 'main.py'], check=True)
    except subprocess.CalledProcessError as e:
        print(f'程序异常退出: {e}')
        input('按回车键退出...')
        sys.exit(1)
    except Exception as e:
        print(f'发生未知错误: {e}')
        input('按回车键退出...')
        sys.exit(1)
"@
        Set-Content -Path "launcher.py" -Value $launcherContent -Encoding UTF8
        Write-Host "已成功创建启动器脚本 launcher.py"
      
    - name: Build with PyInstaller
      shell: powershell
      run: |
        Write-Host "开始构建 Skylark Screen Translator..."
        
        # 使用PyInstaller打包启动器脚本
        pyinstaller --name SkylarkTranslator `
          --onefile `
          --windowed `
          --add-data "C:\Program Files\Tesseract-OCR\tessdata;tessdata" `
          --hidden-import PyQt5.QtCore `
          --hidden-import PyQt5.QtGui `
          --hidden-import PyQt5.QtWidgets `
          --hidden-import pytesseract `
          --hidden-import PIL `
          --hidden-import mss `
          --hidden-import pynput `
          --hidden-import screeninfo `
          --hidden-import requests `
          --hidden-import argostranslate `
          --hidden-import stanza `
          --hidden-import ctranslate2 `
          --hidden-import sentencepiece `
          --hidden-import numpy `
          --hidden-import cv2 `
          --hidden-import ttkthemes `
          --hidden-import certifi `
          launcher.py
        
        # 检查构建是否成功
        if (!(Test-Path "dist\SkylarkTranslator.exe")) {
          throw "构建失败：找不到可执行文件"
        }
        
        Write-Host "构建成功！"
      
    - name: Create distribution package
      shell: powershell
      run: |
        $releaseType = "${{ inputs.release_type }}"
        $version = Get-Date -Format "yyyy.MM.dd.HHmm"
        $packageName = "SkylarkTranslator_Windows_${releaseType}_v${version}"
        
        # 创建打包目录
        New-Item -Path "dist\$packageName" -ItemType Directory -Force | Out-Null
        
        # 复制程序文件
        Copy-Item "dist\SkylarkTranslator.exe" "dist\$packageName\" -Force
        
        # 复制 Tesseract 引擎（可选，如果程序需要）
        Copy-Item "C:\Program Files\Tesseract-OCR\tesseract.exe" "dist\$packageName\" -Force
        
        # 创建启动脚本
        $batchContent = "@echo off`r`n"
        $batchContent += "chcp 65001 > nul`r`n"
        $batchContent += "echo 启动 Skylark Screen Translator...`r`n"
        $batchContent += "cd /d %~dp0`r`n"
        $batchContent += "start `"`" SkylarkTranslator.exe`r`n"
        
        Set-Content -Path "dist\$packageName\启动程序.bat" -Value $batchContent -Encoding Default
        
        # 创建说明文件
        $readmeContent = "Skylark Screen Translator - Windows 版本`r`n"
        $readmeContent += "版本: $version`r`n"
        $readmeContent += "类型: $releaseType`r`n"
        $readmeContent += "构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`r`n`r`n"
        $readmeContent += "== 快速开始 ==`r`n"
        $readmeContent += "1. 解压所有文件到一个文件夹中。`r`n"
        $readmeContent += "2. 双击 '启动程序.bat' 或直接运行 SkylarkTranslator.exe`r`n"
        $readmeContent += "3. 首次使用请先进入'语言包管理'安装翻译包`r`n"
        $readmeContent += "4. 安装完成后重启程序，在设置中选择翻译语言`r`n`r`n"
        $readmeContent += "== 使用说明 ==`r`n"
        $readmeContent += "• 左键拖拽: 选择屏幕区域`r`n"
        $readmeContent += "• 右键双击: 执行OCR和翻译`r`n"
        $readmeContent += "• 左键单击: 显示/隐藏翻译窗口`r`n"
        $readmeContent += "• 鼠标滚轮: 滚动翻译内容`r`n`r`n"
        $readmeContent += "== 注意事项 ==`r`n"
        $readmeContent += "• 这是一个未签名的测试版本，Windows Defender可能会显示安全警告。`r`n"
        $readmeContent += "• 请确保tesseract.exe和tessdata文件夹与主程序在同一目录下。`r`n"
        
        Set-Content -Path "dist\$packageName\使用说明.txt" -Value $readmeContent -Encoding UTF8
        
        # 创建ZIP包
        Compress-Archive -Path "dist\$packageName\*" -DestinationPath "dist\$packageName.zip" -Force
        
        Write-Host "打包完成: $packageName.zip"
        
        # 设置输出变量
        echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "PACKAGE_PATH=dist/$packageName.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: SkylarkTranslator-Windows-${{ inputs.release_type }}
        path: ${{ env.PACKAGE_PATH }}
        retention-days: 7
        
    - name: Create release summary
      id: release_summary
      shell: powershell
      run: |
        $size = (Get-Item "${{ env.PACKAGE_PATH }}").Length
        $sizeMB = [math]::Round($size/1MB, 2)
        $summary = @"
        ## Build completed successfully ✅

        * **Release Type**: `${{ inputs.release_type }}`
        * **Include Debug Info**: `${{ inputs.include_debug }}`
        * **File Name**: `${{ env.PACKAGE_NAME }}.zip`
        * **File Size**: `${sizeMB} MB`

        ### 📥 How to Download
        You can download the build artifact directly from the top of this workflow run summary page, under the "Artifacts" section.
        
        ### 🧪 Testing Instructions
        1.  Download and unzip the file.
        2.  Run `启动程序.bat` or directly execute `SkylarkTranslator.exe`.
        3.  On first launch, you may need to install language packs via the in-app manager.
        ---
        "@
        echo "summary=$summary" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        
    - name: Add summary to workflow
      uses: actions/github-script@v7
      with:
        script: |
          await core.summary
            .addRaw('${{ steps.release_summary.outputs.summary }}')
            .write()
