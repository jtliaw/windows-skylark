name: Build Windows Portable

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_language_packs:
        description: 'Skip ArgosTranslate language pack downloads'
        required: false
        default: false
        type: boolean
      create_installer:
        description: 'Create NSIS installer'
        required: false
        default: false
        type: boolean

jobs:
  build-windows:
    runs-on: windows-latest
    
    env:
      FORCE_CUDA: "0"
      USE_CUDA: "0"
      QT_QPA_PLATFORM: "windows"
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Tesseract OCR
      run: |
        Write-Host "Installing Tesseract OCR..."
        $url = "https://github.com/UB-Mannheim/tesseract/releases/download/v5.3.3.20231005/tesseract-ocr-w64-setup-5.3.3.20231005.exe"
        $installer = "$env:TEMP\tesseract-installer.exe"
        
        Invoke-WebRequest -Uri $url -OutFile $installer -UseBasicParsing
        Start-Process -FilePath $installer -ArgumentList "/S" -Wait
        
        $env:PATH = "C:\Program Files\Tesseract-OCR;" + $env:PATH
        echo "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        Write-Host "Tesseract installed successfully"
      shell: powershell
      
    - name: Download Tesseract language packs
      run: |
        $tessdata = "C:\Program Files\Tesseract-OCR\tessdata"
        $languages = @('chi_sim', 'chi_tra', 'jpn', 'kor', 'deu', 'fra', 'spa', 'rus')
        
        foreach ($lang in $languages) {
          $langFile = "$tessdata\$lang.traineddata"
          if (-not (Test-Path $langFile)) {
            try {
              $url = "https://github.com/tesseract-ocr/tessdata/raw/main/$lang.traineddata"
              Write-Host "Downloading $lang language pack..."
              Invoke-WebRequest -Uri $url -OutFile $langFile -UseBasicParsing -TimeoutSec 60
              Write-Host "Downloaded $lang successfully"
            } catch {
              Write-Warning "Failed to download $lang language pack: $_"
            }
          }
        }
      shell: powershell
      
    - name: Create virtual environment
      run: |
        python -m venv venv
        .\venv\Scripts\Activate.ps1
        python -m pip install --upgrade pip setuptools wheel
        Write-Host "Virtual environment created"
      shell: powershell
      
    - name: Install core Python dependencies
      run: |
        .\venv\Scripts\Activate.ps1
        
        Write-Host "Installing core dependencies..."
        pip install PyQt5==5.15.10
        pip install "Pillow>=9.0.0"
        pip install "numpy>=1.21.0"
        pip install opencv-python-headless
        pip install pytesseract
        pip install mss
        pip install pynput
        pip install requests
        pip install screeninfo
        pip install ttkthemes
        pip install certifi
        pip install pyinstaller
        
        Write-Host "Core dependencies installed successfully"
      shell: powershell
      
    - name: Install ArgosTranslate and PyTorch
      if: ${{ !inputs.skip_language_packs }}
      run: |
        .\venv\Scripts\Activate.ps1
        
        Write-Host "Installing PyTorch CPU version..."
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        
        Write-Host "Installing translation dependencies..."
        pip install PyYAML sentencepiece stanza ctranslate2
        
        Write-Host "Installing ArgosTranslate..."
        pip install argostranslate
        
        Write-Host "ArgosTranslate installation completed"
      shell: powershell
      
    - name: Create language pack installer script
      if: ${{ !inputs.skip_language_packs }}
      run: |
        # Create a separate Python script for language pack installation
        $content = 'import sys
import argostranslate.package
import argostranslate.translate

try:
    print("Updating package index...")
    argostranslate.package.update_package_index()
    
    available_packages = argostranslate.package.get_available_packages()
    print(f"Found {len(available_packages)} available packages")
    
    desired_langs = ["en", "zh", "ja", "ko", "de", "fr", "es"]
    target_packages = [
        pkg for pkg in available_packages
        if pkg.from_code in desired_langs and pkg.to_code in desired_langs
    ]
    
    installed_count = 0
    max_packages = 15
    
    for i, pkg in enumerate(target_packages[:max_packages]):
        try:
            print(f"[{i+1}/{min(len(target_packages), max_packages)}] Installing: {pkg.from_code} -> {pkg.to_code}")
            download_path = pkg.download()
            argostranslate.package.install_from_path(download_path)
            installed_count += 1
            print("Installation successful")
        except Exception as e:
            print(f"Installation failed: {e}")
    
    print(f"Successfully installed {installed_count} language packages")
    
    installed_packages = argostranslate.package.get_installed_packages()
    if installed_packages:
        test_result = argostranslate.translate.translate("Hello world", "en", "zh")
        print(f"Test translation: Hello world -> {test_result}")
        
except Exception as e:
    print(f"Language pack installation error: {e}")
    print("Basic framework still available")
    sys.exit(0)
'
        $content | Out-File -FilePath "install_packs.py" -Encoding UTF8
        Write-Host "Language pack installer script created"
      shell: powershell
      
    - name: Download language packs
      if: ${{ !inputs.skip_language_packs }}
      run: |
        .\venv\Scripts\Activate.ps1
        python install_packs.py
        Remove-Item "install_packs.py" -ErrorAction SilentlyContinue
      shell: powershell
      
    - name: Create online translator module
      run: |
        # Create online_translator.py if it doesn't exist
        if (-not (Test-Path "online_translator.py")) {
          Write-Host "Creating online_translator.py..."
          
          $translatorCode = 'import logging
import os
import sys

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OnlineTranslator:
    def __init__(self):
        self.name = "Enhanced Translator (Windows)"
        self.installed_packages = []
        self.argos_available = False
        self.initialize_argos()
        
    def initialize_argos(self):
        try:
            import argostranslate.package
            import argostranslate.translate
            self.argos_package = argostranslate.package
            self.argos_translate = argostranslate.translate
            self.installed_packages = self.argos_package.get_installed_packages()
            self.argos_available = True
            logger.info(f"ArgosTranslate initialized with {len(self.installed_packages)} packages")
        except ImportError:
            logger.warning("ArgosTranslate not available")
            self.argos_available = False
            
    def translate(self, text, source_lang="auto", target_lang="en"):
        if not text or not text.strip():
            return text
            
        try:
            if self.argos_available and hasattr(self, "argos_translate"):
                source_lang = self._normalize_lang_code(source_lang, text)
                target_lang = self._normalize_lang_code(target_lang)
                
                available_pair = self._find_translation_pair(source_lang, target_lang)
                if available_pair:
                    result = self.argos_translate.translate(text, source_lang, target_lang)
                    if result and result != text:
                        return result
        except Exception as e:
            logger.error(f"Translation failed: {e}")
            
        return f"[Translation failed] {text}"
        
    def _normalize_lang_code(self, lang_code, text=None):
        if lang_code == "auto" and text:
            return self._detect_language(text)
        lang_mapping = {
            "zh-cn": "zh", "zh-tw": "zh", "chinese": "zh",
            "japanese": "ja", "korean": "ko", "german": "de",
            "french": "fr", "spanish": "es", "english": "en"
        }
        return lang_mapping.get(lang_code.lower(), lang_code.lower())
        
    def _detect_language(self, text):
        if any("\u4e00" <= char <= "\u9fff" for char in text):
            return "zh"
        elif any("\u3040" <= char <= "\u309f" or "\u30a0" <= char <= "\u30ff" for char in text):
            return "ja"
        elif any("\uac00" <= char <= "\ud7af" for char in text):
            return "ko"
        else:
            return "en"
            
    def _find_translation_pair(self, from_lang, to_lang):
        for pkg in self.installed_packages:
            if pkg.from_code == from_lang and pkg.to_code == to_lang:
                return True
        return False

default_translator = OnlineTranslator()

def translate_text(text, source_lang="auto", target_lang="en", translator_name=None):
    return default_translator.translate(text, source_lang, target_lang)
'
          
          $translatorCode | Out-File -FilePath "online_translator.py" -Encoding UTF8
          Write-Host "online_translator.py created successfully"
        }
      shell: powershell
      
    - name: Create Windows launcher
      run: |
        $launcherCode = 'import os
import sys
import logging
import traceback

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def setup_windows_environment():
    app_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Set Tesseract paths
    tesseract_paths = [
        r"C:\Program Files\Tesseract-OCR",
        r"C:\Program Files (x86)\Tesseract-OCR"
    ]
    
    for path in tesseract_paths:
        tesseract_exe = os.path.join(path, "tesseract.exe")
        if os.path.exists(tesseract_exe):
            os.environ["PATH"] = path + os.pathsep + os.environ["PATH"]
            os.environ["TESSERACT_CMD"] = tesseract_exe
            logger.info(f"Tesseract found: {tesseract_exe}")
            break
    
    # Set Qt environment
    os.environ["QT_QPA_PLATFORM"] = "windows"
    sys.path.insert(0, app_dir)

def main():
    logger.info("=== Skylark Screen Translator Starting ===")
    setup_windows_environment()
    
    try:
        import skylark_screen_translator
        if hasattr(skylark_screen_translator, "main"):
            skylark_screen_translator.main()
        else:
            exec(open("skylark_screen_translator.py").read())
    except Exception as e:
        logger.error(f"Failed to start application: {e}")
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
'
        
        $launcherCode | Out-File -FilePath "skylark_launcher.py" -Encoding UTF8
        Write-Host "Windows launcher created successfully"
      shell: powershell
      
    - name: Create PyInstaller spec file
      run: |
        $specContent = 'import os
import sys
from PyInstaller.utils.hooks import collect_data_files, collect_submodules

block_cipher = None

hiddenimports = [
    "PyQt5.QtCore", "PyQt5.QtGui", "PyQt5.QtWidgets", "PyQt5.sip", "sip",
    "PIL", "PIL.Image", "PIL.ImageGrab", "PIL.ImageTk",
    "cv2", "numpy", "numpy.core._methods", "numpy.lib.format",
    "pytesseract", "mss", "mss.windows",
    "pynput", "pynput.keyboard", "pynput.mouse",
    "pynput.keyboard._win32", "pynput.mouse._win32",
    "screeninfo", "requests", "requests.packages.urllib3", "certifi",
    "ttkthemes", "json", "hashlib", "uuid",
    "argostranslate", "argostranslate.package", "argostranslate.translate",
    "stanza", "ctranslate2", "sentencepiece",
    "torch", "torch._C", "torch.nn", "torch.optim",
    "online_translator",
]

datas = []

main_files = ["skylark_screen_translator.py", "online_translator.py"]
for file in main_files:
    if os.path.exists(file):
        datas.append((file, "."))

try:
    import certifi
    datas.append((certifi.where(), "certifi"))
except:
    pass

try:
    import argostranslate
    import argostranslate.package
    argos_path = os.path.dirname(argostranslate.__file__)
    datas.append((argos_path, "argostranslate"))
    
    try:
        packages_path = argostranslate.package.get_package_path()
        if os.path.exists(packages_path) and os.listdir(packages_path):
            datas.append((packages_path, "argos_packages"))
    except:
        pass
    hiddenimports.extend(collect_submodules("argostranslate"))
except:
    pass

tesseract_paths = [
    r"C:\Program Files\Tesseract-OCR\tessdata",
    r"C:\Program Files (x86)\Tesseract-OCR\tessdata"
]
for tess_path in tesseract_paths:
    if os.path.exists(tess_path):
        important_langs = ["eng.traineddata", "chi_sim.traineddata", "chi_tra.traineddata", 
                          "jpn.traineddata", "kor.traineddata", "deu.traineddata", "fra.traineddata"]
        for lang_file in important_langs:
            lang_path = os.path.join(tess_path, lang_file)
            if os.path.exists(lang_path):
                datas.append((lang_path, "tessdata"))
        break

a = Analysis(
    ["skylark_launcher.py"],
    pathex=[],
    binaries=[],
    datas=datas,
    hiddenimports=hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=["matplotlib", "scipy", "pandas", "jupyter", "notebook",
              "PyQt5.QtWebEngine", "PyQt5.QtWebEngineWidgets",
              "tkinter", "turtle", "test", "unittest"],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name="Skylark_Screen_Translator",
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=False,
    disable_windowed_traceback=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name="Skylark_Screen_Translator",
)
'
        
        $specContent | Out-File -FilePath "skylark_windows.spec" -Encoding UTF8
        Write-Host "PyInstaller spec file created successfully"
      shell: powershell
      
    - name: Build application with PyInstaller
      run: |
        .\venv\Scripts\Activate.ps1
        
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        
        Write-Host "Building application with PyInstaller..."
        python -m PyInstaller skylark_windows.spec --clean --noconfirm --log-level=INFO
        
        $exePath = "dist\Skylark_Screen_Translator\Skylark_Screen_Translator.exe"
        if (-not (Test-Path $exePath)) {
          Write-Error "Build failed - executable not found at $exePath"
          exit 1
        }
        
        Write-Host "Build completed successfully"
      shell: powershell
      
    - name: Create portable package
      run: |
        $portableDir = "Skylark_Portable"
        if (Test-Path $portableDir) { Remove-Item -Recurse -Force $portableDir }
        New-Item -ItemType Directory -Force -Path $portableDir | Out-Null
        
        Copy-Item -Recurse -Force "dist\Skylark_Screen_Translator\*" $portableDir
        
        # Create batch launcher
        $batchContent = '@echo off
title Skylark Screen Translator
cd /d "%~dp0"

set PATH=%CD%;%CD%\tessdata;%PATH%
set QT_QPA_PLATFORM=windows
set TESSDATA_PREFIX=%CD%\tessdata

echo Starting Skylark Screen Translator...
start "" "Skylark_Screen_Translator.exe"
timeout /t 3 /nobreak >nul
exit /b 0'
        
        $batchContent | Out-File -FilePath "$portableDir\Skylark_Screen_Translator.bat" -Encoding ASCII
        
        # Create debug launcher
        $debugBatch = '@echo off
title Skylark Screen Translator Debug
cd /d "%~dp0"

echo =================================
echo Skylark Screen Translator Debug
echo =================================

set PATH=%CD%;%CD%\tessdata;%PATH%
set QT_QPA_PLATFORM=windows
set TESSDATA_PREFIX=%CD%\tessdata

echo Starting application in debug mode...
"Skylark_Screen_Translator.exe"

echo.
echo Application exited. Press any key to close...
pause >nul'
        
        $debugBatch | Out-File -FilePath "$portableDir\Debug_Start.bat" -Encoding ASCII
        
        # Create README
        $currentDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $readmeContent = "# Skylark Screen Translator - Windows Portable

## Quick Start
1. Extract to any directory
2. Double-click 'Skylark_Screen_Translator.bat' to start
3. Or run 'Debug_Start.bat' for troubleshooting

## Features
- Offline OCR text recognition (Tesseract engine)
- Offline translation (ArgosTranslate engine)
- Screenshot translation
- Multi-language support
- Portable - no installation required

## System Requirements
- Windows 7 SP1 / 8 / 10 / 11
- RAM: 512MB available memory
- Disk: ~200MB free space
- Display: 1024x768 resolution support

## Troubleshooting
1. **Application won't start**
   - Check if Windows Defender is blocking the application
   - Try running as administrator
   - Use Debug_Start.bat for detailed information

2. **Missing Visual C++ Redistributable**
   - Download: https://aka.ms/vs/17/release/vc_redist.x64.exe

## Build Information
- Build Date: $currentDate
- Build Environment: GitHub Actions
- Version: Windows Portable

---
Thank you for using Skylark Screen Translator!"
        
        $readmeContent | Out-File -FilePath "$portableDir\README.txt" -Encoding UTF8
        
        Write-Host "Portable package created successfully"
      shell: powershell
      
    - name: Create ZIP archive
      run: |
        $zipName = "Skylark_Screen_Translator_Windows_Portable.zip"
        if (Test-Path $zipName) { Remove-Item $zipName -Force }
        
        Compress-Archive -Path "Skylark_Portable\*" -DestinationPath $zipName -CompressionLevel Optimal
        
        $size = [math]::Round((Get-Item $zipName).Length / 1MB, 2)
        Write-Host "ZIP archive created: $zipName (${size}MB)"
      shell: powershell
      
    - name: Upload portable build artifact
      uses: actions/upload-artifact@v3
      with:
        name: skylark-windows-portable
        path: Skylark_Portable/
        retention-days: 30
        
    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v3
      with:
        name: skylark-windows-portable-zip
        path: Skylark_Screen_Translator_Windows_Portable.zip
        retention-days: 30
        
    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Skylark_Screen_Translator_Windows_Portable.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-build:
    needs: build-windows
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: skylark-windows-portable
        path: test_build/
        
    - name: Test application structure
      run: |
        $requiredFiles = @(
          "test_build\Skylark_Screen_Translator.exe",
          "test_build\Skylark_Screen_Translator.bat",
          "test_build\Debug_Start.bat",
          "test_build\README.txt"
        )
        
        $allFound = $true
        foreach ($file in $requiredFiles) {
          if (Test-Path $file) {
            Write-Host "✅ Found: $file"
          } else {
            Write-Host "❌ Missing: $file"
            $allFound = $false
          }
        }
        
        if ($allFound) {
          Write-Host "✅ All required files present"
        } else {
          Write-Error "❌ Some required files are missing"
          exit 1
        }
      shell: powershell
