name: Build Windows Release (Fast Startup)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - stable

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: List files in repository
        shell: powershell
        run: |
          Write-Host "Files in repository:"
          Get-ChildItem -Recurse | Format-Table Name

      - name: Install Tesseract OCR
        shell: powershell
        run: |
          $downloadUrl = 'https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-5.3.3.20231005.exe'
          $installerPath = "$env:TEMP\tesseract-installer.exe"
          
          Write-Host 'Downloading Tesseract OCR installer...'
          Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath
          
          Write-Host 'Installing Tesseract OCR...'
          Start-Process -FilePath $installerPath -ArgumentList '/S' -Wait
          
          if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
              echo 'C:\Program Files\Tesseract-OCR' | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              Write-Host 'Tesseract installed successfully'
          } else {
              Write-Error 'Tesseract installation failed'
              exit 1
          }

      - name: Install Python dependencies
        shell: powershell
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install PyQt5
          pip install pytesseract
          pip install numpy
          pip install opencv-python
          pip install pillow
          pip install certifi
          pip install requests
          pip install pyinstaller==6.2.0
          pip install argostranslate  # 确保安装argostranslate

      - name: Verify all required modules
        shell: powershell
        run: |
          Write-Host "Verifying all required modules are installed..."
          $modules = @("sys", "os", "certifi", "time", "re", "queue", "threading", "pytesseract", "PIL", "numpy", "subprocess", "platform", "shutil", "requests", "json", "math", "cv2", "socket", "datetime", "PyQt5", "argostranslate")
          
          foreach ($module in $modules) {
              $modulePath = python -c "import $module; print('$module imported successfully')" 2>$null
              if ($LASTEXITCODE -eq 0) {
                  Write-Host "OK: $module imported successfully"
              } else {
                  Write-Warning "Failed to import $module"
              }
          }

      - name: Create language pack directories
        shell: powershell
        run: |
          # 创建语言包目录
          New-Item -ItemType Directory -Path "argos_packages" -Force
          New-Item -ItemType Directory -Path "tessdata" -Force
          Write-Host "Created language pack directories: argos_packages and tessdata"

      - name: Build with PyInstaller (Directory Mode)
        shell: powershell
        run: |
          Write-Host 'Building Skylark Screen Translator in DIRECTORY mode (fast startup)...'
          
          if (Test-Path 'skylark_screen_translator.py') {
            Write-Host 'Found main program: skylark_screen_translator.py'
            $mainScript = 'skylark_screen_translator.py'
          } elseif (Test-Path 'main.py') {
            Write-Host 'Found main program: main.py'
            $mainScript = 'main.py'
          } else {
            Write-Host 'Available Python files:'
            Get-ChildItem *.py | Format-Table Name
            throw 'No main program found. Please check your repository structure.'
          }
          
          # 使用数组来构建PyInstaller参数，确保所有模块都被包含
          $pyinstallerArgs = @(
              "--name", "SkylarkTranslator",
              "--onedir",
              "--windowed",
              "--add-data", "C:\Program Files\Tesseract-OCR\tesseract.exe;.",
              "--add-data", "argos_packages;argos_packages",  # 添加argos_packages目录
              "--add-data", "tessdata;tessdata",              # 添加tessdata目录
              "--hidden-import", "pytesseract",
              "--hidden-import", "numpy",
              "--hidden-import", "cv2",
              "--hidden-import", "PIL",
              "--hidden-import", "certifi",
              "--hidden-import", "requests",
              "--hidden-import", "argostranslate",            # 添加argostranslate隐藏导入
              "--hidden-import", "argostranslate.package",    # 添加argostranslate子模块
              "--hidden-import", "argostranslate.translate",  # 添加argostranslate子模块
              "--hidden-import", "PyQt5",
              "--hidden-import", "PyQt5.QtCore",
              "--hidden-import", "PyQt5.QtGui",
              "--hidden-import", "PyQt5.QtWidgets",
              "--collect-all", "PyQt5",
              "--collect-all", "pytesseract",
              "--collect-all", "PIL",
              "--collect-all", "numpy",
              "--collect-all", "opencv-python",
              "--collect-all", "certifi",
              "--collect-all", "requests",
              "--collect-all", "mss",
              "--collect-all", "pynput",
              "--collect-all", "screeninfo",
              "--collect-all", "argostranslate",              # 确保argostranslate被完整收集
              "--collect-all", "stanza",
              "--collect-all", "ctranslate2",
              "--collect-all", "sentencepiece",
              "--collect-all", "ttkthemes",
              $mainScript
          )
          
          # 执行PyInstaller命令
          pyinstaller @pyinstallerArgs
          
          $exePath = 'dist\SkylarkTranslator\SkylarkTranslator.exe'
          if (Test-Path $exePath) {
              $folderSize = (Get-ChildItem 'dist\SkylarkTranslator' -Recurse | Measure-Object -Property Length -Sum).Sum
              $sizeMB = [math]::Round($folderSize/1MB, 2)
              Write-Host "Build successful! Directory size: $sizeMB MB"
              echo "BUILD_SIZE_MB=$sizeMB" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
              throw 'Build failed: executable file not found'
          }

      - name: Create environment setup script
        shell: powershell
        run: |
          # 创建环境设置脚本，确保语言包目录正确设置
          $envScript = @'
@echo off
REM Skylark Translator Environment Setup Script
REM This script sets up environment variables for language packs

setlocal

REM Set the application directory
set "APP_DIR=%~dp0"

REM Set Argos Translate packages directory
set "ARGOS_PACKAGES_DIR=%APP_DIR%argos_packages"
if not exist "%ARGOS_PACKAGES_DIR%" mkdir "%ARGOS_PACKAGES_DIR%"

REM Set Tesseract data directory
set "TESSDATA_PREFIX=%APP_DIR%tessdata"
if not exist "%TESSDATA_PREFIX%" mkdir "%TESSDATA_PREFIX%"

REM Set other environment variables
set "QT_QPA_PLATFORM=windows"

REM Launch the application
echo Starting Skylark Translator...
echo Argos packages directory: %ARGOS_PACKAGES_DIR%
echo Tesseract data directory: %TESSDATA_PREFIX%
echo.

start "" "%APP_DIR%SkylarkTranslator.exe"

endlocal
'@
          $envScript | Out-File -FilePath "dist\SkylarkTranslator\skylark_launcher.bat" -Encoding utf8
          Write-Host "Created environment setup script: skylark_launcher.bat"

      - name: Create configuration file
        shell: powershell
        run: |
          # 创建配置文件，设置语言包目录
          $configContent = @'
[Paths]
ArgosPackages = ./argos_packages
TessData = ./tessdata

[Settings]
FirstRun = true
AutoUpdate = true
'@
          $configContent | Out-File -FilePath "dist\SkylarkTranslator\skylark.conf" -Encoding utf8
          Write-Host "Created configuration file: skylark.conf"

      - name: Verify all modules inclusion
        shell: powershell
        run: |
          Write-Host "Checking if all required modules are included in the build..."
          
          $modulesToCheck = @("numpy", "cv2", "PIL", "certifi", "requests", "pytesseract", "PyQt5", "argostranslate")
          
          foreach ($module in $modulesToCheck) {
            if (Test-Path "dist\SkylarkTranslator\$module") {
                Write-Host "OK: $module found in build"
            } else {
                Write-Warning "$module not found in build directory"
                # 尝试手动复制
                $modulePath = python -c "import $module; print($module.__file__)" 2>$null
                if ($LASTEXITCODE -eq 0 -and $modulePath) {
                    $moduleDir = Split-Path $modulePath -Parent
                    Copy-Item -Path $moduleDir -Destination "dist\SkylarkTranslator\" -Recurse -Force
                    Write-Host "Manually copied $module to build directory"
                } else {
                    Write-Error "Could not find $module module location"
                }
            }
          }

      - name: Debug argostranslate installation
        shell: powershell
        run: |
          Write-Host "Debugging argostranslate installation..."
          python -c "import argostranslate; print('argostranslate path:', argostranslate.__file__)"
          python -c "import argostranslate.package; print('package path:', argostranslate.package.__file__)"
          python -c "import argostranslate.translate; print('translate path:', argostranslate.translate.__file__)"

      - name: Create distribution package
        shell: powershell
        run: |
          $releaseType = "${{ inputs.release_type }}"
          $version = Get-Date -Format "yyyy.MM.dd.HHmm"
          $packageName = "SkylarkTranslator_Windows_${releaseType}_v${version}"
          $buildSize = "${{ env.BUILD_SIZE_MB }}"
          
          Write-Host "Creating distribution package: $packageName"
          Write-Host "Application size: $buildSize MB"
          
          Compress-Archive -Path "dist\SkylarkTranslator" -DestinationPath "dist\$packageName.zip" -Force
          
          $readmeLines = @(
            "Skylark Screen Translator - Windows Version",
            "Version: $version",
            "Type: $releaseType",
            "Build Time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')",
            "Application Size: $buildSize MB",
            "",
            "== IMPORTANT: LANGUAGE PACK SETUP ==",
            "This version stores language packs locally in the application folder.",
            "",
            "== How to Use ==",
            "1. Extract this ZIP file to any folder (e.g., C:\SkylarkTranslator)",
            "2. Run skylark_launcher.bat to set up environment variables",
            "3. Or run SkylarkTranslator.exe directly (may need to set environment variables manually)",
            "",
            "== Language Pack Management ==",
            "1. On first run, go to 'Language Pack Management'",
            "2. Download the translation packages you need",
            "3. Packages will be stored in:",
            "   - Argos Translate: .\argos_packages\",
            "   - Tesseract OCR: .\tessdata\",
            "4. Restart the application after installation",
            "",
            "== Manual Environment Setup ==",
            "If language packs are not downloading correctly, set these environment variables:",
            "set ARGOS_PACKAGES_DIR=.\argos_packages",
            "set TESSDATA_PREFIX=.\tessdata",
            "",
            "== File Locations ==",
            "- Main executable: SkylarkTranslator.exe",
            "- Launcher script: skylark_launcher.bat",
            "- Configuration: skylark.conf",
            "- Argos Translate data: .\argos_packages\",
            "- Tesseract data: .\tessdata\",
            "",
            "== Notes ==",
            "• Use skylark_launcher.bat for best compatibility",
            "• Language packs are stored locally and persist between updates",
            "• To uninstall, simply delete the entire folder"
          )
          
          $readmeLines | Out-File -FilePath "dist\README_$packageName.txt" -Encoding utf8
          
          Write-Host "Package created: dist\$packageName.zip"
          echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PACKAGE_PATH=dist/$packageName.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SkylarkTranslator-Fast-Windows-${{ inputs.release_type }}
          path: |
            ${{ env.PACKAGE_PATH }}
            dist/README_${{ env.PACKAGE_NAME }}.txt
          retention-days: 7

      - name: Create build summary
        shell: powershell
        run: |
          $size = (Get-Item "${{ env.PACKAGE_PATH }}").Length
          $sizeMB = [math]::Round($size/1MB, 2)
          
          Write-Host "## Build Complete - Language Pack Fix Edition"
          Write-Host "- Release Type: ${{ inputs.release_type }}"
          Write-Host "- Application Size: ${{ env.BUILD_SIZE_MB }} MB"
          Write-Host "- Zip Package Size: ${sizeMB} MB"
          Write-Host "- File Name: ${{ env.PACKAGE_NAME }}.zip"
          Write-Host ""
          Write-Host "## Key Improvements"
          Write-Host "1. Local Language Packs: Argos Translate and Tesseract OCR packages stored in app folder"
          Write-Host "2. Environment Setup: Includes launcher script to set correct environment variables"
          Write-Host "3. Persistent Storage: Language packs persist between application updates"
          Write-Host ""
          Write-Host "## Download & Use"
          Write-Host "1. Download the ZIP file from Artifacts"
          Write-Host "2. Extract to any folder"
          Write-Host "3. Run skylark_launcher.bat for best compatibility"
          Write-Host "4. Use Language Pack Management to install translation models"
