name: Build Windows Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: '发布类型'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - stable
      include_debug:
        description: '包含调试信息'
        required: false
        type: boolean
        default: false

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        # 安装 Tesseract OCR
        choco install tesseract --version=5.3.3 -y
        echo "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        
        # 安装项目依赖
        pip install -r requirements.txt
        
        # 确保安装了所有必要的包
        pip install pyinstaller==6.2.0
        pip install pywin32
      shell: powershell
      
    - name: Download Tesseract language data
      run: |
        $tessdata = "C:\Program Files\Tesseract-OCR\tessdata"
        New-Item -Path $tessdata -ItemType Directory -Force | Out-Null
        
        # 下载必要的语言包
        $languages = @("eng", "chi_sim", "jpn")
        
        foreach ($lang in $languages) {
          $url = "https://github.com/tesseract-ocr/tessdata_fast/raw/main/$lang.traineddata"
          $output = "$tessdata\$lang.traineddata"
          Write-Host "Downloading $lang language data..."
          try {
            Invoke-WebRequest -Uri $url -OutFile $output -ErrorAction Stop
          } catch {
            Write-Host "Failed to download $lang, trying alternative URL..."
            $url = "https://github.com/tesseract-ocr/tessdata/raw/main/$lang.traineddata"
            Invoke-WebRequest -Uri $url -OutFile $output -ErrorAction SilentlyContinue
          }
        }
      shell: powershell
      
    - name: Create launcher script
      shell: powershell
      run: |
        # 逐行创建启动器脚本内容
        $lines = @(
          "import os",
          "import sys",
          "import subprocess",
          "",
          "if __name__ == '__main__':",
          "    # 设置环境变量",
          "    os.environ['TESSERACT_CMD'] = 'C:\\\\Program Files\\\\Tesseract-OCR\\\\tesseract.exe'",
          "    os.environ['TESSDATA_PREFIX'] = 'C:\\\\Program Files\\\\Tesseract-OCR\\\\tessdata'",
          "    ",
          "    # 运行主程序",
          "    try:",
          "        subprocess.run([sys.executable, 'main.py'], check=True)",
          "    except subprocess.CalledProcessError as e:",
          "        print(f'程序异常退出: {e}')",
          "        input('按回车键退出...')",
          "        sys.exit(1)"
        )
        
        # 将内容写入文件
        $lines | Out-File -FilePath "launcher.py" -Encoding UTF8
        Write-Host "已创建启动器脚本"
      
    - name: Build with PyInstaller
      shell: powershell
      run: |
        Write-Host "开始构建 Skylark Screen Translator..."
        
        # 使用简单的PyInstaller命令
        pyinstaller --name SkylarkTranslator `
          --onefile `
          --windowed `
          --add-data "C:\Program Files\Tesseract-OCR\tesseract.exe;." `
          --add-data "C:\Program Files\Tesseract-OCR\tessdata;tessdata" `
          --hidden-import PyQt5.QtCore `
          --hidden-import PyQt5.QtGui `
          --hidden-import PyQt5.QtWidgets `
          --hidden-import pytesseract `
          --hidden-import PIL `
          --hidden-import mss `
          --hidden-import pynput `
          --hidden-import screeninfo `
          --hidden-import requests `
          --hidden-import argostranslate `
          --hidden-import stanza `
          --hidden-import ctranslate2 `
          --hidden-import sentencepiece `
          --hidden-import numpy `
          --hidden-import cv2 `
          --hidden-import ttkthemes `
          --hidden-import certifi `
          launcher.py
        
        # 检查构建是否成功
        if (!(Test-Path "dist\SkylarkTranslator.exe")) {
          throw "构建失败：找不到可执行文件"
        }
        
        Write-Host "构建成功！"
      
    - name: Create distribution package
      shell: powershell
      run: |
        $releaseType = "${{ inputs.release_type }}"
        $version = Get-Date -Format "yyyy.MM.dd.HHmm"
        $packageName = "SkylarkTranslator_Windows_${releaseType}_v${version}"
        
        # 创建打包目录
        New-Item -Path "dist\$packageName" -ItemType Directory -Force | Out-Null
        
        # 复制程序文件
        Copy-Item "dist\SkylarkTranslator.exe" "dist\$packageName\" -Force
        
        # 复制语言包
        $tessdataSrc = "C:\Program Files\Tesseract-OCR\tessdata"
        $tessdataDst = "dist\$packageName\tessdata"
        if (Test-Path $tessdataSrc) {
          New-Item -Path $tessdataDst -ItemType Directory -Force | Out-Null
          Copy-Item "$tessdataSrc\*.traineddata" $tessdataDst -Force
        }
        
        # 创建启动脚本
        $batchLines = @(
          "@echo off",
          "chcp 65001 > nul",
          "echo 启动 Skylark Screen Translator...",
          "cd /d %~dp0",
          "start \"\" SkylarkTranslator.exe"
        )
        $batchLines | Out-File -FilePath "dist\$packageName\启动程序.bat" -Encoding Default
        
        # 创建说明文件
        $readmeLines = @(
          "Skylark Screen Translator - Windows 版本",
          "版本: $version",
          "类型: $releaseType",
          "构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')",
          "",
          "== 快速开始 ==",
          "1. 双击 '启动程序.bat' 或直接运行 SkylarkTranslator.exe",
          "2. 首次使用请先进入'语言包管理'安装翻译包",
          "3. 安装完成后重启程序，在设置中选择翻译语言",
          "",
          "== 使用说明 ==",
          "• 左键拖拽: 选择屏幕区域",
          "• 右键双击: 执行OCR和翻译",
          "• 左键单击: 显示/隐藏翻译窗口",
          "• 鼠标滚轮: 滚动翻译内容",
          "",
          "== 注意事项 ==",
          "• 这是未签名的测试版本",
          "• Windows Defender可能会显示安全警告（正常现象）",
          "• 需要CPU支持SSE4.1指令集",
          "• 建议运行内存2GB以上",
          "",
          "== 问题反馈 ==",
          "如遇到问题请到GitHub仓库反馈:",
          "https://github.com/jtliaw/Skylark-Screen-Translator"
        )
        $readmeLines | Out-File -FilePath "dist\$packageName\使用说明.txt" -Encoding UTF8
        
        # 创建ZIP包
        Compress-Archive -Path "dist\$packageName" -DestinationPath "dist\$packageName.zip" -Force
        
        Write-Host "打包完成: $packageName.zip"
        
        # 设置输出变量
        echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "PACKAGE_PATH=dist/$packageName.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: SkylarkTranslator-Windows-${{ inputs.release_type }}
        path: ${{ env.PACKAGE_PATH }}
        retention-days: 7
        
    - name: Create release summary
      shell: powershell
      run: |
        $size = (Get-Item "${{ env.PACKAGE_PATH }}").Length
        $sizeMB = [math]::Round($size/1MB, 2)
        
        Write-Host "## 构建完成 ✅" 
        Write-Host "- 发布类型: ${{ inputs.release_type }}"
        Write-Host "- 包含调试信息: ${{ inputs.include_debug }}"
        Write-Host "- 文件大小: ${sizeMB} MB"
        Write-Host "- 文件名: ${{ env.PACKAGE_NAME }}.zip"
        Write-Host ""
        Write-Host "📥 下载构建的文件:"
        Write-Host "1. 点击上方的 Actions 标签"
        Write-Host "2. 选择这次运行"
        Write-Host "3. 在 Artifacts 部分下载 ZIP 文件"
        Write-Host ""
        Write-Host "🧪 测试说明:"
        Write-Host "1. 解压ZIP文件"
        Write-Host "2. 运行 启动程序.bat 或直接运行 SkylarkTranslator.exe"
        Write-Host "3. 首次运行需要安装语言包"
