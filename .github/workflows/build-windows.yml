name: Build Windows Release (Fixed Version with Icon)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - stable

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Chocolatey and Tesseract OCR
        shell: powershell
        run: |
          # 安装 Chocolatey 包管理器
          Write-Host 'Installing Chocolatey package manager...'
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # 刷新环境变量以识别 choco 命令
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          
          # 使用 Chocolatey 安装 Tesseract OCR
          Write-Host 'Installing Tesseract OCR via Chocolatey...'
          choco install tesseract -y
          
          # 验证安装
          if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
              echo 'C:\Program Files\Tesseract-OCR' | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              Write-Host 'Tesseract installed successfully via Chocolatey'
          } else {
              Write-Error 'Tesseract installation failed'
              exit 1
          }

      - name: Install Python dependencies (with specific versions)
        shell: powershell
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
          # 安装特定版本的 setuptools 以避免兼容性问题
          pip install setuptools==68.0.0
          
          # 安装核心依赖
          pip install PyQt5==5.15.9
          pip install pytesseract==0.3.10
          pip install numpy==1.24.3
          pip install opencv-python==4.8.1.78
          pip install pillow==10.0.1
          pip install certifi==2023.7.22
          pip install requests==2.31.0
          pip install pyinstaller==6.2.0
          
          # 安装其他依赖
          pip install mss==9.0.1
          pip install pynput==1.7.6
          pip install screeninfo==0.8.1
          pip install ttkthemes==3.2.2

      - name: Verify project files
        shell: powershell
        run: |
          Write-Host "=== 验证项目文件 ==="
          
          # 检查主要文件
          if (Test-Path 'skylark_screen_translator.py') {
              Write-Host "✓ 找到主程序: skylark_screen_translator.py"
          } else {
              Write-Host "✗ 未找到主程序"
              Write-Host "当前目录文件:"
              Get-ChildItem *.py | Format-Table Name
          }
          
          # 检查图标文件
          $iconFiles = @("skylark.ico", "skylark.png")
          foreach ($icon in $iconFiles) {
              if (Test-Path $icon) {
                  $size = (Get-Item $icon).Length
                  Write-Host "✓ 找到图标文件: $icon (大小: $size 字节)"
              } else {
                  Write-Host "✗ 未找到图标文件: $icon"
              }
          }
          
          # 列出所有文件以便调试
          Write-Host "`n=== 当前目录所有文件 ==="
          Get-ChildItem | Format-Table Name, Length, LastWriteTime

      - name: Create language pack directories
        shell: powershell
        run: |
          # 创建语言包目录
          New-Item -ItemType Directory -Path "tessdata" -Force
          Write-Host "Created language pack directories: tessdata"

      - name: Create default OCR language directories
        shell: powershell
        run: |
          # 创建默认的OCR语言包目录结构
          New-Item -ItemType Directory -Path "tessdata" -Force
          Write-Host "Created tessdata directory"
          
          # 下载一些常用的OCR语言包
          $commonLangs = @("eng", "chi_sim")
          
          foreach ($lang in $commonLangs) {
              $url = "https://github.com/tesseract-ocr/tessdata/raw/main/${lang}.traineddata"
              $outputPath = "tessdata/${lang}.traineddata"
              
              try {
                  Invoke-WebRequest -Uri $url -OutFile $outputPath -TimeoutSec 30
                  Write-Host "Downloaded OCR language pack: $lang"
              } catch {
                  Write-Host "Failed to download $lang language pack: $($_.Exception.Message)"
              }
          }

      - name: Build with PyInstaller (with icon support)
        shell: powershell
        run: |
          Write-Host 'Building Skylark Screen Translator with Icon Support...'
          
          if (Test-Path 'skylark_screen_translator.py') {
            Write-Host 'Found main program: skylark_screen_translator.py'
            $mainScript = 'skylark_screen_translator.py'
          } else {
            Write-Host 'Available Python files:'
            Get-ChildItem *.py | Format-Table Name
            throw 'No main program found. Please check your repository structure.'
          }
          
          # 检查图标文件并设置图标参数
          $iconParam = @()
          if (Test-Path 'skylark.ico') {
              Write-Host '✓ Using skylark.ico as application icon'
              $iconParam = @("--icon", "skylark.ico")
          } elseif (Test-Path 'skylark.png') {
              Write-Host '✓ Using skylark.png as application icon'
              $iconParam = @("--icon", "skylark.png")
          } else {
              Write-Host '⚠ No icon file found, building without icon'
          }
          
          # PyInstaller 参数 - 包含图标和资源文件
          $pyinstallerArgs = @(
              "--name", "SkylarkTranslator",
              "--onedir",
              "--windowed"
          )
          
          # 添加图标参数（如果找到图标文件）
          if ($iconParam.Count -gt 0) {
              $pyinstallerArgs += $iconParam
          }
          
          # 添加数据和二进制文件
          $pyinstallerArgs += @(
              "--add-data", "C:\Program Files\Tesseract-OCR\tesseract.exe;.",
              "--add-data", "tessdata;tessdata"
          )
          
          # 添加图标文件到数据
          if (Test-Path 'skylark.ico') {
              $pyinstallerArgs += @("--add-data", "skylark.ico;.")
          }
          if (Test-Path 'skylark.png') {
              $pyinstallerArgs += @("--add-data", "skylark.png;.")
          }
          
          # 添加其他参数
          $pyinstallerArgs += @(
              "--add-binary", "C:\Program Files\Tesseract-OCR;Tesseract-OCR",
              "--hidden-import", "pytesseract",
              "--hidden-import", "numpy",
              "--hidden-import", "cv2",
              "--hidden-import", "PIL",
              "--hidden-import", "certifi",
              "--hidden-import", "requests",
              "--hidden-import", "PyQt5",
              "--hidden-import", "PyQt5.QtCore",
              "--hidden-import", "PyQt5.QtGui",
              "--hidden-import", "PyQt5.QtWidgets",
              "--exclude-module", "stanza",
              "--exclude-module", "setuptools._distutils",
              $mainScript
          )
          
          # 执行PyInstaller命令
          Write-Host "PyInstaller命令: pyinstaller $($pyinstallerArgs -join ' ')"
          pyinstaller @pyinstallerArgs
          
          $exePath = 'dist\SkylarkTranslator\SkylarkTranslator.exe'
          if (Test-Path $exePath) {
              $folderSize = (Get-ChildItem 'dist\SkylarkTranslator' -Recurse | Measure-Object -Property Length -Sum).Sum
              $sizeMB = [math]::Round($folderSize/1MB, 2)
              Write-Host "Build successful! Directory size: $sizeMB MB"
