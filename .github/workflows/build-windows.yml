name: Build Windows Release (Fast Startup)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - stable

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: List files in repository
        shell: powershell
        run: |
          Write-Host "Files in repository:"
          Get-ChildItem -Recurse | Format-Table Name

      - name: Install Tesseract OCR
        shell: powershell
        run: |
          $downloadUrl = 'https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-5.3.3.20231005.exe'
          $installerPath = "$env:TEMP\tesseract-installer.exe"
          
          Write-Host 'Downloading Tesseract OCR installer...'
          Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath
          
          Write-Host 'Installing Tesseract OCR...'
          Start-Process -FilePath $installerPath -ArgumentList '/S' -Wait
          
          if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
              echo 'C:\Program Files\Tesseract-OCR' | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              Write-Host 'Tesseract installed successfully'
          } else {
              Write-Error 'Tesseract installation failed'
              exit 1
          }

      - name: Install Python dependencies
        shell: powershell
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pytesseract
          pip install numpy  # 确保安装numpy
          pip install opencv-python  # 确保安装opencv-python
          pip install pillow  # 确保安装PIL
          pip install certifi  # 确保安装certifi
          pip install requests  # 确保安装requests
          pip install pyinstaller==6.2.0

      - name: Verify all required modules
        shell: powershell
        run: |
          Write-Host "Verifying all required modules are installed..."
          $modules = @("sys", "os", "certifi", "time", "re", "queue", "threading", "pytesseract", "PIL", "numpy", "subprocess", "platform", "shutil", "requests", "json", "math", "cv2", "socket", "datetime", "threading", "online_translator")
          
          foreach ($module in $modules) {
            try {
              python -c "import $module; print('✓ $module imported successfully')"
            } catch {
              Write-Warning "Failed to import $module"
            }
          }

      - name: Download Tesseract language data
        shell: powershell
        run: |
          $tessdata = 'C:\Program Files\Tesseract-OCR\tessdata'
          New-Item -Path $tessdata -ItemType Directory -Force | Out-Null
          
          $languages = @('eng', 'chi_sim', 'jpn')
          foreach ($lang in $languages) {
            $url = "https://github.com/tesseract-ocr/tessdata_fast/raw/main/$lang.traineddata"
            $output = "$tessdata\$lang.traineddata"
            Write-Host "Downloading $lang language data..."
            Invoke-WebRequest -Uri $url -OutFile $output
          }
          Write-Host 'Language packs installed'

      - name: Build with PyInstaller (Directory Mode)
        shell: powershell
        run: |
          Write-Host 'Building Skylark Screen Translator in DIRECTORY mode (fast startup)...'
          
          if (Test-Path 'skylark_screen_translator.py') {
            Write-Host 'Found main program: skylark_screen_translator.py'
            $mainScript = 'skylark_screen_translator.py'
          } elseif (Test-Path 'main.py') {
            Write-Host 'Found main program: main.py'
            $mainScript = 'main.py'
          } else {
            Write-Host 'Available Python files:'
            Get-ChildItem *.py | Format-Table Name
            throw 'No main program found. Please check your repository structure.'
          }
          
          # 使用数组来构建PyInstaller参数，确保所有模块都被包含
          $pyinstallerArgs = @(
              "--name", "SkylarkTranslator",
              "--onedir",
              "--windowed",
              "--add-data", "C:\Program Files\Tesseract-OCR\tesseract.exe;.",
              "--add-data", "C:\Program Files\Tesseract-OCR\tessdata;tessdata",
              "--hidden-import", "pytesseract",
              "--hidden-import", "numpy",  # 确保numpy被包含
              "--hidden-import", "cv2",    # 确保opencv-python被包含
              "--hidden-import", "PIL",    # 确保PIL被包含
              "--hidden-import", "certifi", # 确保certifi被包含
              "--hidden-import", "requests", # 确保requests被包含
              "--hidden-import", "online_translator", # 确保online_translator被包含
              "--collect-all", "PyQt5",
              "--collect-all", "pytesseract",
              "--collect-all", "PIL",
              "--collect-all", "numpy",
              "--collect-all", "opencv-python",
              "--collect-all", "certifi",
              "--collect-all", "requests",
              "--collect-all", "mss",
              "--collect-all", "pynput",
              "--collect-all", "screeninfo",
              "--collect-all", "argostranslate",
              "--collect-all", "stanza",
              "--collect-all", "ctranslate2",
              "--collect-all", "sentencepiece",
              "--collect-all", "ttkthemes",
              $mainScript
          )
          
          # 执行PyInstaller命令
          pyinstaller @pyinstallerArgs
          
          $exePath = 'dist\SkylarkTranslator\SkylarkTranslator.exe'
          if (Test-Path $exePath) {
              $folderSize = (Get-ChildItem 'dist\SkylarkTranslator' -Recurse | Measure-Object -Property Length -Sum).Sum
              $sizeMB = [math]::Round($folderSize/1MB, 2)
              Write-Host "Build successful! Directory size: $sizeMB MB"
              echo "BUILD_SIZE_MB=$sizeMB" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
              throw 'Build failed: executable file not found'
          }

      - name: Verify all modules inclusion
        shell: powershell
        run: |
          Write-Host "Checking if all required modules are included in the build..."
          
          $modulesToCheck = @("numpy", "cv2", "PIL", "certifi", "requests", "pytesseract")
          
          foreach ($module in $modulesToCheck) {
            if (Test-Path "dist\SkylarkTranslator\$module") {
                Write-Host "✓ $module found in build"
            } else {
                Write-Warning "$module not found in build directory"
                # 尝试手动复制
                try {
                    $modulePath = python -c "import $module; print($module.__file__)" 2>$null
                    if ($modulePath) {
                        $moduleDir = Split-Path $modulePath -Parent
                        Copy-Item -Path $moduleDir -Destination "dist\SkylarkTranslator\" -Recurse -Force
                        Write-Host "✓ Manually copied $module to build directory"
                    } else {
                        Write-Error "Could not find $module module location"
                    }
                } catch {
                    Write-Error "Failed to manually copy $module: $($_.Exception.Message)"
                }
            }
          }

      - name: Debug certifi path
        shell: powershell
        run: |
          Write-Host 'Debugging certifi path...'
          $cacertSource = Join-Path $env:pythonLocation 'Lib\site-packages\certifi\cacert.pem'
          Write-Host ('cacertSource: ' + $cacertSource)
          if (Test-Path $cacertSource) {
              Write-Host ('✓ cacert.pem exists at ' + $cacertSource)
          } else {
              throw ('cacert.pem not found at ' + $cacertSource)
          }

      - name: Verify certifi in build
        shell: powershell
        run: |
          Write-Host 'Checking if certifi is included in the build...'
          $cacertPath = 'dist\SkylarkTranslator\certifi\cacert.pem'
          if (Test-Path $cacertPath) {
              Write-Host '✓ cacert.pem file found'
          } else {
              Write-Warning 'cacert.pem not found, trying to copy it'
              $cacertSource = Join-Path $env:pythonLocation 'Lib\site-packages\certifi\cacert.pem'
              Write-Host ('cacertSource: ' + $cacertSource)
              if ($cacertSource -and (Test-Path $cacertSource)) {
                  New-Item -Path 'dist\SkylarkTranslator\certifi' -ItemType Directory -Force | Out-Null
                  Copy-Item -Path $cacertSource -Destination 'dist\SkylarkTranslator\certifi\cacert.pem' -Force
                  Write-Host '✓ Copied cacert.pem from certifi package'
              } else {
                  throw ('Could not find cacert.pem at path: ' + $cacertSource)
              }
          }

      - name: Create distribution package
        shell: powershell
        run: |
          $releaseType = "${{ inputs.release_type }}"
          $version = Get-Date -Format "yyyy.MM.dd.HHmm"
          $packageName = "SkylarkTranslator_Windows_${releaseType}_v${version}"
          $buildSize = "${{ env.BUILD_SIZE_MB }}"
          
          Write-Host "Creating distribution package: $packageName"
          Write-Host "Application size: $buildSize MB"
          
          Compress-Archive -Path "dist\SkylarkTranslator" -DestinationPath "dist\$packageName.zip" -Force
          
          $readmeLines = @(
            "Skylark Screen Translator - Windows Version",
            "Version: $version",
            "Type: $releaseType",
            "Build Time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')",
            "Application Size: $buildSize MB",
            "",
            "== IMPORTANT: FAST STARTUP VERSION ==",
            "This version uses directory mode instead of single executable mode.",
            "This means:",
            "1. FAST startup (no extraction needed)",
            "2. CLEAR disk usage (all files are visible in the application folder)",
            "3. EASY to manage and clean up",
            "",
            "== How to Use ==",
            "1. Extract this ZIP file to any folder (e.g., C:\SkylarkTranslator)",
            "2. Run SkylarkTranslator.exe directly from the extracted folder",
            "3. No need to use any batch files",
            "",
            "== First Time Setup ==",
            "1. On first run, go to 'Language Pack Management'",
            "2. Download the translation packages you need",
            "3. Restart the application after installation",
            "",
            "== File Locations ==",
            "- Main executable: SkylarkTranslator.exe",
            "- Dependencies: All in the same folder",
            "- Tesseract data: .\tessdata\",
            "- Argos Translate data: Will be downloaded to your user AppData folder",
            "",
            "== Notes ==",
            "• This version starts much faster than the single executable version",
            "• It uses about $buildSize MB of disk space in the installation location",
            "• To uninstall, simply delete the entire folder"
          )
          
          $readmeLines | Out-File -FilePath "dist\README_$packageName.txt" -Encoding utf8
          
          Write-Host "Package created: dist\$packageName.zip"
          echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PACKAGE_PATH=dist/$packageName.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SkylarkTranslator-Fast-Windows-${{ inputs.release_type }}
          path: |
            ${{ env.PACKAGE_PATH }}
            dist/README_${{ env.PACKAGE_NAME }}.txt
          retention-days: 7

      - name: Create build summary
        shell: powershell
        run: |
          $size = (Get-Item "${{ env.PACKAGE_PATH }}").Length
          $sizeMB = [math]::Round($size/1MB, 2)
          
          Write-Host "## Build Complete - Fast Startup Edition"
          Write-Host "- Release Type: ${{ inputs.release_type }}"
          Write-Host "- Application Size: ${{ env.BUILD_SIZE_MB }} MB"
          Write-Host "- Zip Package Size: ${sizeMB} MB"
          Write-Host "- File Name: ${{ env.PACKAGE_NAME }}.zip"
          Write-Host ""
          Write-Host "## Key Improvements"
          Write-Host "1. Instant Startup: No more long extraction waits"
          Write-Host "2. Transparent Disk Usage: All files are visible in the application folder"
          Write-Host "3. Easy Management: Simply delete the folder to uninstall"
          Write-Host ""
          Write-Host "## Download & Use"
          Write-Host "1. Download the ZIP file from Artifacts"
          Write-Host "2. Extract to any folder"
          Write-Host "3. Run SkylarkTranslator.exe directly"
          Write-Host "4. Use Language Pack Management to install translation models"
