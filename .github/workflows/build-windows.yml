name: Build Windows Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: '发布类型'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - stable
      include_debug:
        description: '包含调试信息'
        required: false
        type: boolean
        default: false

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        choco install tesseract --version=5.3.3 -y
        echo "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pyinstaller==6.2.0
        pip install pywin32
      shell: powershell
      
    - name: Download Tesseract language data
      run: |
        $tessdata = "C:\Program Files\Tesseract-OCR\tessdata"
        New-Item -Path $tessdata -ItemType Directory -Force | Out-Null
        $languages = @("eng", "chi_sim", "jpn")
        foreach ($lang in $languages) {
          $url = "https://github.com/tesseract-ocr/tessdata_fast/raw/main/$lang.traineddata"
          $output = "$tessdata\$lang.traineddata"
          try {
            Invoke-WebRequest -Uri $url -OutFile $output -ErrorAction Stop
          } catch {
            $url = "https://github.com/tesseract-ocr/tessdata/raw/main/$lang.traineddata"
            Invoke-WebRequest -Uri $url -OutFile $output -ErrorAction SilentlyContinue
          }
        }
      shell: powershell
      
    - name: Create launcher script
      shell: powershell
      run: |
        @"
#!/usr/bin/env python3
"""
Skylark Screen Translator - Windows 启动器
"""

import os
import sys
import traceback
import logging

def setup_logging():
    log_format = '[%(levelname)s] %(message)s'
    logging.basicConfig(level=logging.INFO, format=log_format)
    return logging.getLogger(__name__)

logger = setup_logging()

def setup_windows_environment():
    app_dir = os.path.dirname(os.path.abspath(__file__))
    internal_dir = os.path.join(app_dir, "_internal")
    cert_paths = [
        os.path.join(internal_dir, "certifi", "cacert.pem"),
        os.path.join(app_dir, "certifi", "cacert.pem"),
    ]
    for cert_path in cert_paths:
        if os.path.isfile(cert_path):
            os.environ["SSL_CERT_FILE"] = cert_path
            os.environ["REQUESTS_CA_BUNDLE"] = cert_path
            break
    tesseract_paths = [
        os.path.join(internal_dir, "tesseract", "tesseract.exe"),
        os.path.join(app_dir, "tesseract", "tesseract.exe"),
        "C:\\Program Files\\Tesseract-OCR\\tesseract.exe",
    ]
    for tesseract_path in tesseract_paths:
        if os.path.isfile(tesseract_path):
            os.environ["TESSERACT_CMD"] = tesseract_path
            break
    tessdata_paths = [
        os.path.join(internal_dir, "tessdata"),
        os.path.join(app_dir, "tessdata"),
        "C:\\Program Files\\Tesseract-OCR\\tessdata",
    ]
    for tessdata_path in tessdata_paths:
        if os.path.isdir(tessdata_path):
            os.environ["TESSDATA_PREFIX"] = tessdata_path
            break

def configure_argos_packages():
    user_data_dir = os.path.join(os.path.expanduser("~"), "AppData", "Local", "argos-translate", "packages")
    if os.environ.get("ARGOS_PACKAGES_DIR"):
        return
    try:
        os.makedirs(user_data_dir, exist_ok=True)
        os.environ["ARGOS_PACKAGES_DIR"] = user_data_dir
    except Exception:
        pass

def main():
    try:
        setup_windows_environment()
        configure_argos_packages()
        app_dir = os.path.dirname(os.path.abspath(__file__))
        main_script = os.path.join(app_dir, "main.py")
        if not os.path.isfile(main_script):
            print(f"找不到主程序: {main_script}")
            sys.exit(1)
        sys.path.insert(0, app_dir)
        from main import main as app_main
        app_main()
    except Exception:
        traceback.print_exc()
        input("程序异常，按回车键退出...")
        sys.exit(1)

if __name__ == "__main__":
    main()
"@ | Out-File -FilePath "launcher.py" -Encoding UTF8
      
    - name: Prepare PyInstaller spec
      shell: powershell
      run: |
        @"
# -*- mode: python ; coding: utf-8 -*-
import os
import sys
from PyInstaller.building.build_main import Analysis, EXE, COLLECT
from PyInstaller.building.datastruct import TOC, Tree
from PyInstaller.building.utils import _check_guts_eq

block_cipher = None
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

a = Analysis(
    ['launcher.py'],
    pathex=[os.path.dirname(os.path.abspath(__file__))],
    binaries=[],
    datas=[
        ('*.py', '.'),
        ('*.png', '.'),
        ('*.ico', '.'),
        ('*.json', '.'),
    ],
    hiddenimports=[
        'PyQt5.QtCore','PyQt5.QtGui','PyQt5.QtWidgets',
        'pytesseract','PIL','PIL.Image','PIL.ImageGrab',
        'mss','pynput','pynput.keyboard','pynput.mouse',
        'screeninfo','requests','argostranslate','argostranslate.package',
        'argostranslate.translate','stanza','ctranslate2','sentencepiece',
        'numpy','cv2','ttkthemes','certifi',
        'packaging','packaging.version','packaging.specifiers','packaging.requirements',
    ],
    excludes=['matplotlib','scipy','pandas','tkinter','test','unittest'],
)

tesseract_bin = 'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'
tessdata_dir = 'C:\\Program Files\\Tesseract-OCR\\tessdata'
if os.path.exists(tesseract_bin):
    a.binaries.append((tesseract_bin, 'tesseract'))
if os.path.exists(tessdata_dir):
    a.datas.append((tessdata_dir, 'tessdata'))

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
exe = EXE(pyz,a.scripts,a.binaries,a.zipfiles,a.datas,
          name='SkylarkTranslator',console=False,
          icon='icon.ico' if os.path.exists('icon.ico') else None)
coll = COLLECT(exe,a.binaries,a.zipfiles,a.datas,name='SkylarkTranslator')
"@ | Out-File -FilePath "skylark.spec" -Encoding UTF8
      
    - name: Build with PyInstaller
      shell: powershell
      run: |
        pyinstaller skylark.spec --clean --noconfirm
        if (!(Test-Path "dist\SkylarkTranslator\SkylarkTranslator.exe")) {
          throw "构建失败：找不到可执行文件"
        }
      
    - name: Create distribution package
      shell: powershell
      run: |
        $releaseType = "${{ inputs.release_type }}"
        $version = Get-Date -Format "yyyy.MM.dd.HHmm"
        $packageName = "SkylarkTranslator_Windows_${releaseType}_v${version}"
        New-Item -Path "dist\$packageName" -ItemType Directory -Force | Out-Null
        Copy-Item "dist\SkylarkTranslator\*" "dist\$packageName\" -Recurse -Force
        $tessdataSrc = "C:\Program Files\Tesseract-OCR\tessdata"
        $tessdataDst = "dist\$packageName\tessdata"
        if (Test-Path $tessdataSrc) {
          New-Item -Path $tessdataDst -ItemType Directory -Force | Out-Null
          Copy-Item "$tessdataSrc\*.traineddata" $tessdataDst -Force
        }
        @"
@echo off
chcp 65001 > nul
echo 启动 Skylark Screen Translator...
cd /d "%~dp0"
start "" SkylarkTranslator.exe
"@ | Out-File -FilePath "dist\$packageName\启动程序.bat" -Encoding Default
        @"
Skylark Screen Translator - Windows 版本
版本: $version
类型: $releaseType
构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
...
"@ | Out-File -FilePath "dist\$packageName\使用说明.txt" -Encoding UTF8
        Compress-Archive -Path "dist\$packageName" -DestinationPath "dist\$packageName.zip" -Force
        echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "PACKAGE_PATH=dist/$packageName.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: SkylarkTranslator-Windows-${{ inputs.release_type }}
        path: ${{ env.PACKAGE_PATH }}
        retention-days: 7
