name: Build Windows Release (Minimal Size)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - stable

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check if Tesseract is already installed
        shell: powershell
        run: |
          if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
              Write-Host 'Tesseract is already installed'
              echo 'C:\Program Files\Tesseract-OCR' | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              exit 0
          } else {
              Write-Host 'Tesseract not found, will install it'
          }

      - name: Install Tesseract OCR (if needed)
        shell: powershell
        run: |
          if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
              Write-Host 'Tesseract already installed, skipping installation'
              exit 0
          }
          
          Write-Host 'Installing Tesseract OCR using Windows installer...'
          
          # Download Tesseract installer from official source
          $tesseractUrl = "https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-5.3.3.20231005.exe"
          $installerPath = "$env:TEMP\tesseract-setup.exe"
          
          try {
              # Download the installer
              Write-Host "Downloading Tesseract installer from $tesseractUrl"
              Invoke-WebRequest -Uri $tesseractUrl -OutFile $installerPath
              
              # Install Tesseract silently
              Write-Host "Installing Tesseract OCR..."
              Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait
              
              # Verify installation
              if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
                  echo 'C:\Program Files\Tesseract-OCR' | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                  Write-Host 'Tesseract installed successfully'
              } else {
                  Write-Host 'Tesseract installation may have failed, but continuing build process'
              }
          } catch {
              $errorMsg = $_.Exception.Message
              Write-Host "Failed to download or install Tesseract: $errorMsg"
              Write-Host 'Continuing build process without Tesseract installation'
          } finally {
              # Clean up installer
              if (Test-Path $installerPath) {
                  Remove-Item $installerPath -Force
              }
          }

      - name: Install Python dependencies
        shell: powershell
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install setuptools==68.0.0
          pip install PyQt5==5.15.9
          pip install pytesseract==0.3.10
          pip install numpy==1.24.3
          pip install opencv-python==4.8.1.78
          pip install pillow==10.0.1
          pip install certifi==2023.7.22
          pip install requests==2.31.0
          pip install pyinstaller==6.2.0
          pip install mss==9.0.1
          pip install pynput==1.7.6
          pip install screeninfo==0.8.1
          pip install ttkthemes==3.2.2

      - name: Build with PyInstaller
        shell: powershell
        run: |
          Write-Host 'Building Skylark Screen Translator...'
          
          if (Test-Path 'skylark_screen_translator.py') {
            Write-Host 'Found main program: skylark_screen_translator.py'
            $mainScript = 'skylark_screen_translator.py'
          } else {
            Write-Host 'Available Python files:'
            Get-ChildItem *.py | Format-Table Name
            throw 'Main program not found. Please check your repository structure.'
          }
          
          # Simplified PyInstaller configuration
          $pyinstallerArgs = @(
              "--name", "SkylarkTranslator",
              "--onedir",
              "--windowed",
              "--hidden-import", "pytesseract",
              "--hidden-import", "numpy",
              "--hidden-import", "cv2",
              "--hidden-import", "PIL",
              "--hidden-import", "certifi",
              "--hidden-import", "requests",
              "--hidden-import", "PyQt5",
              "--hidden-import", "PyQt5.QtCore",
              "--hidden-import", "PyQt5.QtGui",
              "--hidden-import", "PyQt5.QtWidgets",
              "--exclude-module", "stanza",
              "--exclude-module", "setuptools._distutils",
              $mainScript
          )
          
          # Execute PyInstaller command
          pyinstaller @pyinstallerArgs
          
          $exePath = 'dist\SkylarkTranslator\SkylarkTranslator.exe'
          if (Test-Path $exePath) {
              $folderSize = (Get-ChildItem 'dist\SkylarkTranslator' -Recurse | Measure-Object -Property Length -Sum).Sum
              $sizeMB = [math]::Round($folderSize/1MB, 2)
              Write-Host "Build successful! Directory size: $sizeMB MB"
              echo "BUILD_SIZE_MB=$sizeMB" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
              throw 'Build failed: Executable file not found'
          }

      - name: Create environment setup script
        shell: powershell
        run: |
          # Create environment setup script
          $envScriptContent = @"
          @echo off
          chcp 65001 > nul
          echo Setting up environment for Skylark Translator...

          set APP_DIR=%~dp0
          set TESSDATA_PREFIX=%APP_DIR%\tessdata

          if not exist "%TESSDATA_PREFIX%" mkdir "%TESSDATA_PREFIX%"

          set QT_QPA_PLATFORM=windows

          echo Environment variables set:
          echo   APP_DIR=%APP_DIR%
          echo   TESSDATA_PREFIX=%TESSDATA_PREFIX%

          echo.
          echo Starting Skylark Translator...
          start "" "%APP_DIR%SkylarkTranslator.exe"
          "@
          $envScriptContent | Out-File -FilePath "dist\SkylarkTranslator\skylark_launcher.bat" -Encoding utf8
          Write-Host "Created environment setup script: skylark_launcher.bat"

      - name: Create distribution package
        shell: powershell
        run: |
          $releaseType = "${{ inputs.release_type }}"
          $version = Get-Date -Format "yyyy.MM.dd.HHmm"
          # As requested, don't include "test" in the package name
          $packageName = "SkylarkTranslator_Windows_v${version}"
          $buildSize = "${{ env.BUILD_SIZE_MB }}"
          
          Write-Host "Creating distribution package: $packageName"
          Write-Host "Application size: $buildSize MB"
          
          Compress-Archive -Path "dist\SkylarkTranslator" -DestinationPath "dist\$packageName.zip" -Force
          
          $readmeLines = @(
            "Skylark Screen Translator - Windows Version",
            "Version: $version",
            "Build Type: $releaseType",
            "Build Time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')",
            "Application Size: $buildSize MB",
            "",
            "== IMPORTANT NOTES ==",
            "This version uses Google online translation service, no local translation models required.",
            "OCR functionality requires language packs to be downloaded on first run.",
            "The application will automatically download essential language packs (English and Simplified Chinese).",
            "Additional language packs can be downloaded from within the application.",
            "",
            "== HOW TO USE ==",
            "1. Extract this ZIP file to any folder (e.g., C:\SkylarkTranslator)",
            "2. Run skylark_launcher.bat to set up environment variables",
            "3. Or run SkylarkTranslator.exe directly",
            "4. On first run, the application will download necessary OCR language packs",
            "5. For additional OCR languages, use the built-in download feature in the application",
            "",
            "== INTERNET CONNECTION REQUIRED ==",
            "- First run requires internet connection to download OCR language packs",
            "- Google translation service requires internet connection",
            "",
            "== SUPPORT ==",
            "If you encounter issues, please try:",
            "1. Running skylark_launcher.bat instead of the executable directly",
            "2. Ensuring your system has the latest Visual C++ Redistributable",
            "3. Checking for Windows updates",
            "4. Ensuring network connection is available for first-time setup"
          )
          
          $readmeLines | Out-File -FilePath "dist\README_$packageName.txt" -Encoding utf8
          
          Write-Host "Package created: dist\$packageName.zip"
          echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PACKAGE_PATH=dist/$packageName.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SkylarkTranslator-Windows
          path: |
            ${{ env.PACKAGE_PATH }}
            dist/README_${{ env.PACKAGE_NAME }}.txt
          retention-days: 7

      - name: Create build summary
        shell: powershell
        run: |
          $size = (Get-Item "${{ env.PACKAGE_PATH }}").Length
          $sizeMB = [math]::Round($size/1MB, 2)
          
          Write-Host "## Build Complete - Minimal Size Edition"
          Write-Host "- Release Type: ${{ inputs.release_type }}"
          Write-Host "- Application Size: ${{ env.BUILD_SIZE_MB }} MB"
          Write-Host "- Zip Package Size: ${sizeMB} MB"
          Write-Host "- File Name: ${{ env.PACKAGE_NAME }}.zip"
          Write-Host ""
          Write-Host "## Key Features"
          Write-Host "1. Minimal Package Size: No bundled OCR language packs"
          Write-Host "2. Removed Argos Translate: Using Google online translation service"
          Write-Host "3. Simplified Build: Excluded problematic modules"
          Write-Host "4. Direct Tesseract Installation: Downloaded and installed Tesseract directly"
          Write-Host "5. Automatic Language Pack Download: Application downloads necessary OCR languages on first run"
          Write-Host ""
          Write-Host "## Download & Use"
          Write-Host "1. Download the ZIP file from Artifacts"
          Write-Host "2. Extract to any folder"
          Write-Host "3. Run skylark_launcher.bat for best compatibility"
          Write-Host "4. On first run, the application will automatically download OCR language packs"
          Write-Host "5. Use the in-app downloader for additional OCR languages"
          Write-Host "6. Translation requires internet connection (uses Google translation service)"
