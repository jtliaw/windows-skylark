name: Build Windows Release (Minimal Size)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - stable

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check if Tesseract is already installed
        shell: powershell
        run: |
          if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
              Write-Host 'Tesseract is already installed'
              echo 'C:\Program Files\Tesseract-OCR' | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              exit 0
          } else {
              Write-Host 'Tesseract not found, will install it'
          }

      - name: Install Tesseract OCR (if needed)
        shell: powershell
        run: |
          if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
              Write-Host 'Tesseract already installed, skipping installation'
              exit 0
          }
          
          Write-Host 'Installing Tesseract OCR using Windows installer...'
          
          # Download Tesseract installer from official source
          $tesseractUrl = "https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-5.3.3.20231005.exe"
          $installerPath = "$env:TEMP\tesseract-setup.exe"
          
          try {
              # Download the installer
              Write-Host "Downloading Tesseract installer from $tesseractUrl"
              Invoke-WebRequest -Uri $tesseractUrl -OutFile $installerPath
              
              # Install Tesseract silently
              Write-Host "Installing Tesseract OCR..."
              Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait
              
              # Verify installation
              if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
                  echo 'C:\Program Files\Tesseract-OCR' | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                  Write-Host 'Tesseract installed successfully'
              } else {
                  Write-Host 'Tesseract installation may have failed, but continuing build process'
              }
          } catch {
              $errorMsg = $_.Exception.Message
              Write-Host "Failed to download or install Tesseract: $errorMsg"
              Write-Host 'Continuing build process without Tesseract installation'
          } finally {
              # Clean up installer
              if (Test-Path $installerPath) {
                  Remove-Item $installerPath -Force
              }
          }

      - name: Install Python dependencies
        shell: powershell
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install setuptools==68.0.0
          pip install PyQt5==5.15.9
          pip install pytesseract==0.3.10
          pip install numpy==1.24.3
          pip install opencv-python==4.8.1.78
          pip install pillow==10.0.1
          pip install certifi==2023.7.22
          pip install requests==2.31.0
          pip install pyinstaller==6.2.0
          pip install mss==9.0.1
          pip install pynput==1.7.6
          pip install screeninfo==0.8.1
          pip install ttkthemes==3.2.2

      # 创建空的 tessdata 目录（应用运行时会自动管理）
      - name: Create tessdata directory structure
        shell: powershell
        run: |
          New-Item -ItemType Directory -Path "tessdata" -Force
          Write-Host "Created tessdata directory for application use"
          # 创建一个标记文件，表明这是空目录
          "# This directory will be populated by the application at runtime" | Out-File -FilePath "tessdata\README.txt" -Encoding utf8

      # 可选：预下载核心语言包（减少用户首次使用时的等待）
      - name: Download essential OCR language packs (optional)
        shell: powershell
        run: |
          # 由于你的应用支持内置下载，这一步是可选的
          # 如果你想减少用户首次使用的等待时间，可以预下载核心语言包
          $downloadCore = $true  # 设为 $false 可跳过预下载
          
          if ($downloadCore) {
              $essentialLangs = @("eng", "chi_sim")
              
              foreach ($lang in $essentialLangs) {
                  $outputPath = "tessdata\${lang}.traineddata"
                  
                  $sources = @(
                      "https://github.com/tesseract-ocr/tessdata/raw/main/${lang}.traineddata",
                      "https://raw.githubusercontent.com/tesseract-ocr/tessdata/main/${lang}.traineddata"
                  )
                  
                  $downloaded = $false
                  foreach ($url in $sources) {
                      try {
                          Write-Host "Downloading language pack: $lang from $url"
                          Invoke-WebRequest -Uri $url -OutFile $outputPath -TimeoutSec 60
                          Write-Host "Successfully downloaded: $lang"
                          $downloaded = $true
                          break
                      } catch {
                          $errorMsg = $_.Exception.Message
                          Write-Host "Failed to download from $url : $errorMsg"
                      }
                  }
                  
                  if (-not $downloaded) {
                      Write-Host "Warning: Could not download $lang - users can download it through the app"
                  }
              }
          } else {
              Write-Host "Skipping pre-download of language packs - users will download via application"
          }

      - name: Build with PyInstaller
        shell: powershell
        run: |
          Write-Host 'Building Skylark Screen Translator...'
          
          # 检查主脚本文件
          $possibleScripts = @("skylark_screen_translator.py", "main.py", "app.py")
          $mainScript = $null
          
          foreach ($script in $possibleScripts) {
              if (Test-Path $script) {
                  $mainScript = $script
                  Write-Host "Found main script: $mainScript"
                  break
              }
          }
          
          if (-not $mainScript) {
              Write-Host 'Available Python files:'
              Get-ChildItem *.py | Format-Table Name
              throw 'Main program not found. Please check your repository structure.'
          }
          
          # PyInstaller 配置
          $pyinstallerArgs = @(
              "--name", "SkylarkTranslator",
              "--onedir",
              "--windowed",
              "--add-data", "tessdata;tessdata",
              "--hidden-import", "pytesseract",
              "--hidden-import", "numpy",
              "--hidden-import", "cv2",
              "--hidden-import", "PIL",
              "--hidden-import", "certifi",
              "--hidden-import", "requests",
              "--hidden-import", "PyQt5",
              "--hidden-import", "PyQt5.QtCore",
              "--hidden-import", "PyQt5.QtGui",
              "--hidden-import", "PyQt5.QtWidgets",
              "--hidden-import", "mss",
              "--hidden-import", "pynput", 
              "--hidden-import", "screeninfo",
              "--hidden-import", "ttkthemes",
              "--exclude-module", "stanza",
              "--exclude-module", "setuptools._distutils",
              "--exclude-module", "test",
              "--exclude-module", "unittest",
              $mainScript
          )
          
          # 执行 PyInstaller
          pyinstaller @pyinstallerArgs
          
          # 验证构建结果
          $exePath = "dist\SkylarkTranslator\SkylarkTranslator.exe"
          if (Test-Path $exePath) {
              $folderSize = (Get-ChildItem 'dist\SkylarkTranslator' -Recurse | Measure-Object -Property Length -Sum).Sum
              $sizeMB = [math]::Round($folderSize/1MB, 2)
              Write-Host "Build successful! Directory size: $sizeMB MB"
              echo "BUILD_SIZE_MB=$sizeMB" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              
              # 验证 tessdata 目录是否正确包含
              if (Test-Path "dist\SkylarkTranslator\tessdata") {
                  Write-Host "tessdata directory successfully included in build"
              } else {
                  Write-Host "Warning: tessdata directory not found in build output"
              }
          } else {
              throw 'Build failed: Executable file not found'
          }

      - name: Create enhanced launcher script
        shell: powershell
        run: |
          # 创建增强的启动脚本
          $launcherContent = @"
          @echo off
          chcp 65001 > nul
          echo ================================================
          echo    Skylark Screen Translator - Windows Launcher
          echo ================================================
          echo.
          
          set APP_DIR=%~dp0
          set TESSDATA_PREFIX=%APP_DIR%tessdata
          
          echo Setting up environment...
          echo   Application Directory: %APP_DIR%
          echo   Tesseract Data Directory: %TESSDATA_PREFIX%
          
          REM 确保 tessdata 目录存在
          if not exist "%TESSDATA_PREFIX%" (
              echo Creating tessdata directory...
              mkdir "%TESSDATA_PREFIX%"
          )
          
          REM 设置 Qt 平台
          set QT_QPA_PLATFORM=windows
          
          REM 检查可执行文件是否存在
          if not exist "%APP_DIR%SkylarkTranslator.exe" (
              echo ERROR: SkylarkTranslator.exe not found!
              echo Please ensure you have extracted all files correctly.
              pause
              exit /b 1
          )
          
          echo.
          echo Starting Skylark Screen Translator...
          echo Note: The application will automatically manage OCR language packs.
          echo You can download additional languages from within the application.
          echo.
          
          REM 启动应用
          cd /d "%APP_DIR%"
          start "" "%APP_DIR%SkylarkTranslator.exe"
          
          REM 等待一秒钟让应用启动
          timeout /t 1 > nul
          echo Application started successfully!
          "@
          
          $launcherContent | Out-File -FilePath "dist\SkylarkTranslator\skylark_launcher.bat" -Encoding utf8
          Write-Host "Created enhanced launcher script: skylark_launcher.bat"

      - name: Create distribution package
        shell: powershell
        run: |
          $releaseType = "${{ inputs.release_type }}"
          $version = Get-Date -Format "yyyy.MM.dd.HHmm"
          $packageName = "SkylarkTranslator_Windows_v${version}"
          $buildSize = "${{ env.BUILD_SIZE_MB }}"
          
          Write-Host "Creating distribution package: $packageName"
          Write-Host "Application size: $buildSize MB"
          
          # 创建压缩包
          Compress-Archive -Path "dist\SkylarkTranslator" -DestinationPath "dist\$packageName.zip" -Force
          
          # 创建详细的 README
          $readmeLines = @(
            "===============================================",
            "   Skylark Screen Translator - Windows Build",
            "===============================================",
            "",
            "Version: $version",
            "Build Type: $releaseType", 
            "Build Time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')",
            "Application Size: $buildSize MB",
            "",
            "== QUICK START ==",
            "1. Extract this ZIP file to any folder",
            "2. Run 'skylark_launcher.bat' (recommended)",
            "   OR run 'SkylarkTranslator.exe' directly",
            "3. The application will auto-create tessdata folder",
            "4. Download OCR language packs from within the app",
            "",
            "== KEY FEATURES ==",
            "✓ Automatic tessdata directory management",
            "✓ Built-in OCR language pack downloader", 
            "✓ Google online translation (requires internet)",
            "✓ Screen capture and OCR functionality",
            "✓ Multi-language support",
            "",
            "== DIRECTORY STRUCTURE ==",
            "SkylarkTranslator/",
            "├── SkylarkTranslator.exe     # Main application",
            "├── skylark_launcher.bat      # Recommended launcher",
            "├── tessdata/                 # OCR language packs (auto-managed)",
            "└── [PyQt5 and other dependencies]",
            "",
            "== OCR LANGUAGE MANAGEMENT ==",
            "- The application automatically creates the tessdata folder",
            "- Language packs are downloaded on-demand through the app interface",
            "- No manual tessdata management required",
            "- Supports all Tesseract languages",
            "",
            "== SYSTEM REQUIREMENTS ==",
            "- Windows 10 or later (recommended)",
            "- Internet connection (for translation and language pack downloads)",
            "- Visual C++ Redistributable 2015-2022 (usually pre-installed)",
            "",
            "== TROUBLESHOOTING ==",
            "1. If the app won't start:",
            "   - Use skylark_launcher.bat instead of direct .exe",
            "   - Install Visual C++ Redistributable 2015-2022",
            "   - Run as Administrator if necessary",
            "",
            "2. If OCR doesn't work:",
            "   - The app will prompt you to download language packs",
            "   - Ensure internet connection for downloads",
            "   - Check that tessdata folder was created",
            "",
            "3. If translation fails:",
            "   - Ensure stable internet connection",
            "   - Google translation service requires internet access",
            "",
            "== TECHNICAL NOTES ==",
            "- This build uses Google's online translation service",
            "- OCR powered by Tesseract OCR engine",
            "- Language packs downloaded from official Tesseract repository",
            "- All data stored locally (except translation requests)",
            "",
            "== SUPPORT ==",
            "For issues or questions, please check the project repository.",
            "The application includes built-in error handling and user guidance."
          )
          
          $readmeLines | Out-File -FilePath "dist\README_$packageName.txt" -Encoding utf8
          
          Write-Host "Package created: dist\$packageName.zip"
          echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PACKAGE_PATH=dist/$packageName.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SkylarkTranslator-Windows-${{ inputs.release_type }}
          path: |
            ${{ env.PACKAGE_PATH }}
            dist/README_${{ env.PACKAGE_NAME }}.txt
          retention-days: 30

      - name: Create build summary
        shell: powershell
        run: |
          $packageSize = (Get-Item "${{ env.PACKAGE_PATH }}").Length
          $packageSizeMB = [math]::Round($packageSize/1MB, 2)
          
          Write-Host "## ✅ Build Complete - Optimized for User Experience"
          Write-Host ""
          Write-Host "### 📋 Build Information"
          Write-Host "- **Release Type:** ${{ inputs.release_type }}"
          Write-Host "- **Application Size:** ${{ env.BUILD_SIZE_MB }} MB"
          Write-Host "- **Package Size:** ${packageSizeMB} MB"
          Write-Host "- **File Name:** ${{ env.PACKAGE_NAME }}.zip"
          Write-Host ""
          Write-Host "### 🎯 Key Optimizations"
          Write-Host "1. **Auto-managed tessdata:** Application creates and manages tessdata directory"
          Write-Host "2. **On-demand downloads:** Users download OCR languages as needed"
          Write-Host "3. **Enhanced launcher:** Improved skylark_launcher.bat with better error handling"
          Write-Host "4. **Streamlined build:** Excluded unnecessary modules for smaller size"
          Write-Host ""
          Write-Host "### 🚀 User Experience"
          Write-Host "1. Extract ZIP → Run skylark_launcher.bat → Ready to use"
          Write-Host "2. Automatic tessdata folder creation and management"
          Write-Host "3. Built-in language pack downloader"
          Write-Host "4. No manual configuration required"
          Write-Host ""
          Write-Host "### 📦 Distribution Ready"
          Write-Host "- Download from GitHub Actions artifacts"
          Write-Host "- Comprehensive README included"
          Write-Host "- Enhanced launcher script for better compatibility"
          Write-Host "- Self-contained and portable"
