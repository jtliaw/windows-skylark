name: Build Windows Release (Fixed Version)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - stable

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Chocolatey and Tesseract OCR
        shell: powershell
        run: |
          # 安装 Chocolatey 包管理器
          Write-Host 'Installing Chocolatey package manager...'
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # 刷新环境变量以识别 choco 命令
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          
          # 使用 Chocolatey 安装 Tesseract OCR
          Write-Host 'Installing Tesseract OCR via Chocolatey...'
          choco install tesseract -y
          
          # 验证安装
          if (Test-Path 'C:\Program Files\Tesseract-OCR\tesseract.exe') {
              echo 'C:\Program Files\Tesseract-OCR' | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              Write-Host 'Tesseract installed successfully via Chocolatey'
          } else {
              Write-Error 'Tesseract installation failed'
              exit 1
          }

      - name: Install Python dependencies (with specific versions)
        shell: powershell
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
          # 安装特定版本的 setuptools 以避免兼容性问题
          pip install setuptools==68.0.0
          
          # 安装核心依赖
          pip install PyQt5==5.15.9
          pip install pytesseract==0.3.10
          pip install numpy==1.24.3
          pip install opencv-python==4.8.1.78
          pip install pillow==10.0.1
          pip install certifi==2023.7.22
          pip install requests==2.31.0
          pip install pyinstaller==6.2.0
          
          
          # 安装其他依赖
          pip install mss==9.0.1
          pip install pynput==1.7.6
          pip install screeninfo==0.8.1
          pip install ttkthemes==3.2.2

      - name: Create language pack directories
        shell: powershell
        run: |
          # 创建语言包目录
          New-Item -ItemType Directory -Path "tessdata" -Force
          Write-Host "Created language pack directories: tessdata"

      - name: Create default OCR language directories
        shell: powershell
        run: |
          # 创建默认的OCR语言包目录结构
          New-Item -ItemType Directory -Path "tessdata" -Force
          Write-Host "Created tessdata directory"
          
          # 下载一些常用的OCR语言包
          $commonLangs = @("eng", "chi_sim")
          
          foreach ($lang in $commonLangs) {
              $url = "https://github.com/tesseract-ocr/tessdata/raw/main/${lang}.traineddata"
              $outputPath = "tessdata/${lang}.traineddata"
              
              try {
                  Invoke-WebRequest -Uri $url -OutFile $outputPath -TimeoutSec 30
                  Write-Host "Downloaded OCR language pack: $lang"
              } catch {
                  Write-Host "Failed to download $lang language pack: $($_.Exception.Message)"
              }
          }

      - name: Build with PyInstaller (simplified)
        shell: powershell
        run: |
          Write-Host 'Building Skylark Screen Translator...'
          
          if (Test-Path 'skylark_screen_translator.py') {
            Write-Host 'Found main program: skylark_screen_translator.py'
            $mainScript = 'skylark_screen_translator.py'
          } else {
            Write-Host 'Available Python files:'
            Get-ChildItem *.py | Format-Table Name
            throw 'No main program found. Please check your repository structure.'
          }
          
          # 检查图标文件是否存在
          if (Test-Path 'skylark.ico') {
              Write-Host 'Found icon file: skylark.ico'
              $iconOption = "--icon", "skylark.ico"
          } else {
              Write-Host 'Icon file not found, building without icon'
              $iconOption = ""
          }
          
          # 使用简化的 PyInstaller 配置，避免问题模块
          $pyinstallerArgs = @(
              "--name", "skylarktranslator",
              $iconOption,
              "--onedir",
              "--windowed",
              "--add-data", "C:\Program Files\Tesseract-OCR\tesseract.exe;.",
              "--add-data", "tessdata;tessdata",
              "--add-binary", "C:\Program Files\Tesseract-OCR;Tesseract-OCR",
              "--hidden-import", "pytesseract",
              "--hidden-import", "numpy",
              "--hidden-import", "cv2",
              "--hidden-import", "PIL",
              "--hidden-import", "certifi",
              "--hidden-import", "requests",
              "--hidden-import", "PyQt5",
              "--hidden-import", "PyQt5.QtCore",
              "--hidden-import", "PyQt5.QtGui",
              "--hidden-import", "PyQt5.QtWidgets",
              "--exclude-module", "stanza",  # 排除有问题的模块
              "--exclude-module", "setuptools._distutils",  # 排除有问题的模块
              $mainScript
          )
          
          # 执行PyInstaller命令
          pyinstaller @pyinstallerArgs
          
          $exePath = 'dist\skylarktranslator\skylarktranslator.exe'
          if (Test-Path $exePath) {
              $folderSize = (Get-ChildItem 'dist\skylarktranslator' -Recurse | Measure-Object -Property Length -Sum).Sum
              $sizeMB = [math]::Round($folderSize/1MB, 2)
              Write-Host "Build successful! Directory size: $sizeMB MB"
              echo "BUILD_SIZE_MB=$sizeMB" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
              throw 'Build failed: executable file not found'
          }

      - name: Rename internal folder
        shell: powershell
        run: |
          # 将 _internal 文件夹重命名为 _internal
          $buildDir = "dist\skylarktranslator"
          if (Test-Path "$buildDir\skylarktranslator.exe") {
              # 重命名 _internal 文件夹
              Rename-Item -Path "$buildDir\skylarktranslator" -NewName "_internal" -Force
              Write-Host "Renamed internal folder to _internal"
          } else {
              Write-Error "Build directory structure not as expected"
          }

      - name: Create README file
        shell: powershell
        run: |
          $buildSize = "${{ env.BUILD_SIZE_MB }}"
          $readmeContent = @"
Skylark Screen Translator - Windows Version

== IMPORTANT NOTES ==
This is a simplified build to ensure compatibility.
Some advanced translation features may be limited.

== How to Use ==
1. Extract all files to a folder of your choice
2. Run skylarktranslator.exe to start the application

== File Structure ==
- skylarktranslator.exe (main executable)
- _internal/ (contains all required dependencies)
- tessdata/ (OCR language data files)

== Support ==
If you encounter issues, please ensure:
1. Your system has the latest Visual C++ Redistributable installed
2. You have installed Windows updates
3. Your antivirus is not blocking the application

Build Size: $buildSize MB
Build Date: $(Get-Date -Format 'yyyy-MM-dd')
"@
          $readmeContent | Out-File -FilePath "dist\skylarktranslator\README_SkylarkTranslator_Windows" -Encoding utf8
          Write-Host "Created README file"

      - name: Create distribution package
        shell: powershell
        run: |
          $version = Get-Date -Format "yyyy.MM.dd.HHmm"
          $packageName = "SkylarkTranslator_Windows_v${version}"
          $buildSize = "${{ env.BUILD_SIZE_MB }}"
          
          Write-Host "Creating distribution package: $packageName"
          Write-Host "Application size: $buildSize MB"
          
          # 创建压缩包，只包含要求的三个项目
          Compress-Archive -Path `
            "dist\skylarktranslator\skylarktranslator.exe",
            "dist\skylarktranslator\_internal",
            "dist\skylarktranslator\README_SkylarkTranslator_Windows" `
            -DestinationPath "dist\$packageName.zip" -Force
          
          Write-Host "Package created: dist\$packageName.zip"
          echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PACKAGE_PATH=dist/$packageName.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SkylarkTranslator-Windows-${{ inputs.release_type }}
          path: ${{ env.PACKAGE_PATH }}
          retention-days: 7

      - name: Create build summary
        shell: powershell
        run: |
          $size = (Get-Item "${{ env.PACKAGE_PATH }}").Length
          $sizeMB = [math]::Round($size/1MB, 2)
          
          Write-Host "## Build Complete - Simplified Edition"
          Write-Host "- Release Type: ${{ inputs.release_type }}"
          Write-Host "- Application Size: ${{ env.BUILD_SIZE_MB }} MB"
          Write-Host "- Zip Package Size: ${sizeMB} MB"
          Write-Host "- File Name: ${{ env.PACKAGE_NAME }}.zip"
          Write-Host ""
          Write-Host "## Package Contents"
          Write-Host "1. skylarktranslator.exe (main executable with icon)"
          Write-Host "2. _internal/ (all required dependencies)"
          Write-Host "3. README_SkylarkTranslator_Windows (documentation)"
          Write-Host ""
          Write-Host "## Key Changes"
          Write-Host "1. Added application icon (skylark.ico)"
          Write-Host "2. Simplified package structure with only three required items"
          Write-Host "3. Removed test label from package name"
          Write-Host "4. Removed launcher script to reduce confusion"
          Write-Host ""
          Write-Host "## Download & Use"
          Write-Host "1. Download the ZIP file from Artifacts"
          Write-Host "2. Extract all files to a folder"
          Write-Host "3. Run skylarktranslator.exe directly"
